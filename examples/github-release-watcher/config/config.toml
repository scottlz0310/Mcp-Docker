# =============================================================================
# GitHub Release Watcher - 設定ファイル
# =============================================================================
# このファイルは GitHub リリースを監視し、新しいリリースが公開されたときに
# 複数のチャネルで通知を送信するための設定を定義します。
#
# 環境変数展開:
#   ${VAR_NAME} または $VAR_NAME 形式で環境変数を使用できます
#   例: token = "${GITHUB_TOKEN}"
# =============================================================================

# -----------------------------------------------------------------------------
# GitHub API 設定
# -----------------------------------------------------------------------------
[github]
# GitHub Personal Access Token
# 権限: public_repo (パブリックリポジトリの読み取り) または repo (全リポジトリ)
# .env ファイルで GITHUB_TOKEN を設定することを推奨
token = "${GITHUB_TOKEN}"

# チェック間隔（秒）
# リリースをチェックする頻度を指定します
# 注意: GitHub API のレート制限に注意 (認証済み: 5000リクエスト/時)
check_interval = 300

# -----------------------------------------------------------------------------
# 監視するリポジトリ
# -----------------------------------------------------------------------------
# リポジトリリストを定義します
# 各リポジトリには owner, repo, url が必要です

[[repositories]]
owner = "microsoft"
repo = "WSL"
url = "https://github.com/microsoft/WSL"
# フィルタモード: "all" (全リリース), "stable" (安定版のみ), "prerelease" (プレリリースのみ)
filter_mode = "stable"
# バージョンパターン（正規表現、オプション）
# version_pattern = "^v?\\d+\\.\\d+\\.\\d+$"

[[repositories]]
owner = "docker"
repo = "compose"
url = "https://github.com/docker/compose"
filter_mode = "stable"

[[repositories]]
owner = "nektos"
repo = "act"
url = "https://github.com/nektos/act"
filter_mode = "all"

# -----------------------------------------------------------------------------
# 通知設定
# -----------------------------------------------------------------------------
[notifications]
# 通知機能の有効/無効
enabled = true

# 有効な通知チャネル
# 利用可能: "native", "discord", "slack", "webhook", "email", "file"
# デフォルトはファイル出力のみ（環境変数設定後に他のチャネルを追加）
# 注意: Dockerコンテナ内からnative通知は動作しません
channels = ["file"]

# -----------------------------------------------------------------------------
# ネイティブ通知設定 (Windows Toast/macOS/Linux)
# -----------------------------------------------------------------------------
[notifications.native]
# 注意: Dockerコンテナ内からは動作しません。ホスト上で直接実行する場合のみ有効
enabled = false
# 通知の表示時間（秒）
duration = 10
# サウンド再生
sound = true

# -----------------------------------------------------------------------------
# Discord Webhook 通知設定
# -----------------------------------------------------------------------------
[notifications.discord]
enabled = false
# Discord Webhook URL (.env で DISCORD_WEBHOOK_URL を設定)
webhook_url = "${DISCORD_WEBHOOK_URL}"
# 表示名
username = "GitHub Release Watcher"
# アバター画像URL
avatar_url = "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
# 埋め込みカラー (16進数)
color = 0x0366D6
# メンションするユーザーID（オプション）
# mention_users = ["123456789012345678", "234567890123456789"]

# -----------------------------------------------------------------------------
# Slack Webhook 通知設定
# -----------------------------------------------------------------------------
[notifications.slack]
enabled = false
# Slack Webhook URL (.env で SLACK_WEBHOOK_URL を設定)
webhook_url = "${SLACK_WEBHOOK_URL}"
# 表示名
username = "GitHub Release Watcher"
# アイコン絵文字
icon_emoji = ":rocket:"
# チャンネル（オプション、Webhook設定で指定されたチャンネルを上書き）
# channel = "#releases"
# メンションするユーザー名（オプション）
# mention_users = ["user1", "user2"]

# -----------------------------------------------------------------------------
# 汎用 Webhook 通知設定
# -----------------------------------------------------------------------------
[notifications.webhook]
enabled = false
# Webhook URL
url = "https://your-webhook-endpoint.com/notify"
# HTTPメソッド
method = "POST"
# カスタムヘッダー（オプション）
# [notifications.webhook.headers]
# Authorization = "Bearer your-token"
# X-Custom-Header = "value"

# -----------------------------------------------------------------------------
# Email (SMTP) 通知設定
# -----------------------------------------------------------------------------
[notifications.email]
enabled = false
# SMTPサーバー設定
smtp_server = "${SMTP_SERVER}"
smtp_port = 587
# SMTP認証情報
username = "${SMTP_USERNAME}"
password = "${SMTP_PASSWORD}"
# 送信元・送信先アドレス
from = "${SMTP_FROM}"
to = ["${SMTP_TO}"]
# TLS/SSL設定
use_tls = true
use_ssl = false

# -----------------------------------------------------------------------------
# ファイル出力通知設定
# -----------------------------------------------------------------------------
[notifications.file]
enabled = true
# 出力ファイルパス
output_path = "/app/data/notifications.json"
# 出力フォーマット: "json" または "markdown"
format = "json"
# 追記モード（true）または上書きモード（false）
append = true
