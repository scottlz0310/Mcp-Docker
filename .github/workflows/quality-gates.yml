# =============================================================================
# GitHub Actions Simulator - 品質ゲート統合ワークフロー
# =============================================================================
# このワークフローは、CI/CDパイプラインに品質ゲートを統合し、
# 配布品質チェック、ドキュメント検証、テンプレート検証を自動化します。
#
# 実行タイミング:
# - プルリクエスト時（品質チェック）
# - メインブランチへのプッシュ時（完全検証）
# - リリース前（品質確認）
# - 定期実行（品質監視）
#
# 品質ゲート:
# 1. 配布スクリプト品質チェック
# 2. ドキュメント整合性検証
# 3. テンプレート動作確認
# 4. エンドツーエンド検証
# 5. セキュリティ・パフォーマンス検証
# =============================================================================

name: 🛡️ Quality Gates

on:
  # プルリクエスト時の品質チェック
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

  # メインブランチへのプッシュ時
  push:
    branches: [main]

  # リリース前の品質確認
  workflow_call:
    inputs:
      release_mode:
        description: 'リリースモードでの実行'
        required: false
        type: boolean
        default: false
      quality_level:
        description: '品質レベル (basic|standard|strict)'
        required: false
        type: string
        default: 'standard'

  # 定期実行（毎日午前2時 UTC）
  schedule:
    - cron: '0 2 * * *'

  # 手動実行
  workflow_dispatch:
    inputs:
      quality_level:
        description: '品質レベル'
        required: false
        default: 'standard'
        type: choice
        options:
          - basic
          - standard
          - strict
      skip_slow_tests:
        description: '時間のかかるテストをスキップ'
        required: false
        default: false
        type: boolean
      generate_reports:
        description: '詳細レポートを生成'
        required: false
        default: true
        type: boolean

# 環境変数
env:
  PYTHON_VERSION: '3.13'
  UV_CACHE_DIR: /tmp/.uv-cache
  QUALITY_GATE_TIMEOUT: 1800  # 30分
  PYTHONUNBUFFERED: 1

# 権限設定
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  checks: write

jobs:
  # ---------------------------------------------------------------------------
  # 品質ゲート設定と前処理
  # ---------------------------------------------------------------------------
  quality-gate-setup:
    name: 🔧 品質ゲート設定
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      quality-level: ${{ steps.config.outputs.quality-level }}
      skip-slow-tests: ${{ steps.config.outputs.skip-slow-tests }}
      generate-reports: ${{ steps.config.outputs.generate-reports }}
      release-mode: ${{ steps.config.outputs.release-mode }}
      changed-files: ${{ steps.changes.outputs.changed-files }}
      needs-full-validation: ${{ steps.changes.outputs.needs-full-validation }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔧 品質ゲート設定
        id: config
        run: |
          # 品質レベルの決定
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            QUALITY_LEVEL="strict"
          elif [[ "${{ github.event_name }}" == "workflow_call" ]] && [[ "${{ inputs.release_mode }}" == "true" ]]; then
            QUALITY_LEVEL="strict"
          elif [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            QUALITY_LEVEL="standard"
          else
            QUALITY_LEVEL="${{ inputs.quality_level || 'basic' }}"
          fi

          # その他の設定
          SKIP_SLOW_TESTS="${{ inputs.skip_slow_tests || 'false' }}"
          GENERATE_REPORTS="${{ inputs.generate_reports || 'true' }}"
          RELEASE_MODE="${{ inputs.release_mode || 'false' }}"

          # 出力
          echo "quality-level=$QUALITY_LEVEL" >> $GITHUB_OUTPUT
          echo "skip-slow-tests=$SKIP_SLOW_TESTS" >> $GITHUB_OUTPUT
          echo "generate-reports=$GENERATE_REPORTS" >> $GITHUB_OUTPUT
          echo "release-mode=$RELEASE_MODE" >> $GITHUB_OUTPUT

          echo "🎯 品質レベル: $QUALITY_LEVEL"
          echo "⚡ 高速モード: $SKIP_SLOW_TESTS"
          echo "📊 レポート生成: $GENERATE_REPORTS"
          echo "🚀 リリースモード: $RELEASE_MODE"

      - name: 🔍 変更ファイル検出
        id: changes
        run: |
          # 変更されたファイルの検出
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PRの場合は変更されたファイルを取得
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          else
            # その他の場合は全ファイルを対象
            find . -type f \( -name "*.py" -o -name "*.sh" -o -name "*.yml" -o -name "*.yaml" -o -name "*.md" -o -name "*.sample" -o -name "*.example" \) > changed_files.txt
          fi

          # 変更ファイルの分析
          CHANGED_FILES=$(cat changed_files.txt | tr '\n' ',' | sed 's/,$//')

          # 完全検証が必要かどうかの判定
          NEEDS_FULL_VALIDATION="false"

          if grep -qE "(scripts/|\.github/workflows/|Makefile|pyproject\.toml|requirements|setup)" changed_files.txt; then
            NEEDS_FULL_VALIDATION="true"
          fi

          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            NEEDS_FULL_VALIDATION="true"
          fi

          echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "needs-full-validation=$NEEDS_FULL_VALIDATION" >> $GITHUB_OUTPUT

          echo "📋 変更ファイル数: $(wc -l < changed_files.txt)"
          echo "🔍 完全検証必要: $NEEDS_FULL_VALIDATION"

  # ---------------------------------------------------------------------------
  # 配布スクリプト品質チェック
  # ---------------------------------------------------------------------------
  distribution-quality-check:
    name: 📦 配布スクリプト品質チェック
    runs-on: ubuntu-latest
    needs: quality-gate-setup
    timeout-minutes: 15
    if: ${{ contains(needs.quality-gate-setup.outputs.changed-files, 'scripts/') || needs.quality-gate-setup.outputs.needs-full-validation == 'true' }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 システムツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint jq

      - name: 🔍 配布スクリプト構文チェック
        run: |
          echo "🔍 配布スクリプトの構文チェック中..."

          # Shell構文チェック
          find scripts/ -name "*.sh" -type f -exec shellcheck {} +

          # Python構文チェック
          find scripts/ -name "*.py" -type f -exec python3 -m py_compile {} +

          echo "✅ 構文チェック完了"

      - name: 🧪 配布スクリプト機能テスト
        run: |
          echo "🧪 配布スクリプトの機能テスト中..."

          # run-actions.sh の基本機能テスト
          timeout 60 ./scripts/run-actions.sh --help

          # 依存関係チェック機能のテスト
          timeout 60 ./scripts/run-actions.sh --check-deps || true

          # その他の主要スクリプトのヘルプ表示テスト
          for script in scripts/*.sh; do
            if [[ -x "$script" ]]; then
              echo "Testing $script..."
              timeout 30 "$script" --help 2>/dev/null || true
            fi
          done

          echo "✅ 機能テスト完了"

      - name: 📊 配布スクリプト品質メトリクス
        run: |
          echo "📊 配布スクリプトの品質メトリクス収集中..."

          # スクリプトの複雑度分析
          echo "### 配布スクリプト品質レポート" > distribution-quality-report.md
          echo "" >> distribution-quality-report.md

          echo "#### スクリプト一覧" >> distribution-quality-report.md
          find scripts/ -name "*.sh" -type f | while read -r script; do
            lines=$(wc -l < "$script")
            functions=$(grep -c "^[[:space:]]*function\|^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*(" "$script" || echo "0")
            echo "- $script: $lines 行, $functions 関数" >> distribution-quality-report.md
          done

          echo "" >> distribution-quality-report.md
          echo "#### 品質チェック結果" >> distribution-quality-report.md
          echo "- 構文チェック: ✅ 通過" >> distribution-quality-report.md
          echo "- 機能テスト: ✅ 通過" >> distribution-quality-report.md
          echo "- 実行時刻: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> distribution-quality-report.md

          echo "✅ 品質メトリクス収集完了"

      - name: 📄 配布品質レポートアップロード
        uses: actions/upload-artifact@v4
        with:
          name: distribution-quality-report
          path: distribution-quality-report.md
          retention-days: 30

  # ---------------------------------------------------------------------------
  # ドキュメント整合性検証（テスト未実装のため無効化）
  # ---------------------------------------------------------------------------
  documentation-validation:
    name: 📚 ドキュメント整合性検証
    runs-on: ubuntu-latest
    needs: quality-gate-setup
    timeout-minutes: 10
    if: false  # テスト未実装のため無効化

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 ドキュメント検証ツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

          # markdownlintのインストール
          npm install -g markdownlint-cli

      - name: 🔍 ドキュメント整合性チェック実行
        run: |
          echo "🔍 ドキュメント整合性チェック中..."

          # 新しいテスト構造: tests/integration/配下のドキュメント整合性テストを実行
          uv run pytest tests/integration/test_documentation_consistency.py -v --tb=short

          echo "✅ ドキュメント整合性チェック完了"

      - name: 📝 Markdown構文チェック
        run: |
          echo "📝 Markdown構文チェック中..."

          # markdownlintでMarkdownファイルをチェック
          markdownlint README.md docs/ --ignore node_modules || {
            echo "⚠️ Markdown構文に問題がありますが、処理を継続します"
          }

          echo "✅ Markdown構文チェック完了"

      - name: 🔗 リンク有効性チェック
        run: |
          echo "🔗 リンク有効性チェック中..."

          # 内部リンクの有効性をチェック
          python3 -c "
          import os
          import re
          from pathlib import Path

          def check_internal_links():
              issues = []
              for md_file in Path('.').rglob('*.md'):
                  content = md_file.read_text(encoding='utf-8', errors='ignore')

                  # 内部リンクを検出
                  links = re.findall(r'\[.*?\]\(([^)]+)\)', content)
                  for link in links:
                      if not link.startswith('http') and not link.startswith('#'):
                          # 相対パスの場合
                          target_path = md_file.parent / link
                          if not target_path.exists():
                              issues.append(f'{md_file}: リンク切れ {link}')

              return issues

          issues = check_internal_links()
          if issues:
              print('⚠️ リンク切れが見つかりました:')
              for issue in issues[:10]:  # 最初の10件のみ表示
                  print(f'  - {issue}')
              if len(issues) > 10:
                  print(f'  ... 他 {len(issues) - 10} 件')
          else:
              print('✅ 内部リンクチェック完了')
          "

          echo "✅ リンク有効性チェック完了"

  # ---------------------------------------------------------------------------
  # テンプレート検証（簡素化計画により無効化）
  # ---------------------------------------------------------------------------
  template-validation:
    name: 📋 テンプレート検証
    runs-on: ubuntu-latest
    needs: quality-gate-setup
    timeout-minutes: 20
    if: false  # 簡素化計画でテンプレートファイルを削除したため無効化

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 🐳 Docker環境セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 テンプレート検証ツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint jq

          # hadolintのインストール
          HADOLINT_VERSION="2.12.0"
          wget -O /tmp/hadolint "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint
          sudo mv /tmp/hadolint /usr/local/bin/hadolint

          # pre-commitのインストール
          pip install pre-commit

      - name: 🔍 テンプレート検証実行
        run: |
          echo "🔍 テンプレート検証中..."

          # 既存のテンプレート検証スクリプトを実行
          ./scripts/ci-validate-templates.sh --verbose

          echo "✅ テンプレート検証完了"

      - name: 🧪 テンプレート機能テスト
        run: |
          echo "🧪 テンプレート機能テスト中..."

          # テンプレート検証テストを実行
          uv run pytest tests/test_template_validation.py -v --tb=short

          echo "✅ テンプレート機能テスト完了"

  # ---------------------------------------------------------------------------
  # エンドツーエンド検証
  # ---------------------------------------------------------------------------
  end-to-end-validation:
    name: 🔄 エンドツーエンド検証
    runs-on: ubuntu-latest
    needs: [quality-gate-setup, distribution-quality-check, documentation-validation, template-validation]
    timeout-minutes: 30
    if: ${{ needs.quality-gate-setup.outputs.quality-level != 'basic' && needs.quality-gate-setup.outputs.skip-slow-tests != 'true' }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 🐳 Docker環境セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔄 エンドツーエンドテスト実行
        run: |
          echo "🔄 エンドツーエンドテスト中..."

          # エンドツーエンドユーザー体験テストを実行
          uv run pytest tests/test_end_to_end_user_experience.py -v --tb=short

          echo "✅ エンドツーエンドテスト完了"

      - name: 🏗️ 統合ビルドテスト
        run: |
          echo "🏗️ 統合ビルドテスト中..."

          # Dockerイメージのビルドテスト
          docker build -t github-actions-simulator:test .

          # 基本機能テスト
          docker run --rm github-actions-simulator:test --help

          echo "✅ 統合ビルドテスト完了"

  # ---------------------------------------------------------------------------
  # 包括的品質検証（厳格モード）
  # ---------------------------------------------------------------------------
  comprehensive-quality-validation:
    name: 🛡️ 包括的品質検証
    runs-on: ubuntu-latest
    needs: [quality-gate-setup, end-to-end-validation]
    timeout-minutes: 45
    if: ${{ needs.quality-gate-setup.outputs.quality-level == 'strict' }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 🐳 Docker環境セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🧪 包括的テストスイート実行
        run: |
          echo "🧪 包括的テストスイート実行中..."

          # 包括的テストスイートを実行
          ./scripts/run-comprehensive-tests.sh --ci --report

          echo "✅ 包括的テストスイート完了"

      - name: 🔒 セキュリティ検証
        run: |
          echo "🔒 セキュリティ検証中..."

          # セキュリティスキャンの実行
          if command -v trivy >/dev/null 2>&1; then
            # Dockerイメージのセキュリティスキャン
            docker build -t github-actions-simulator:security-test .
            trivy image --exit-code 0 --severity HIGH,CRITICAL github-actions-simulator:security-test
          else
            echo "⚠️ Trivyが利用できません。セキュリティスキャンをスキップします"
          fi

          echo "✅ セキュリティ検証完了"

      - name: ⚡ パフォーマンス検証
        run: |
          echo "⚡ パフォーマンス検証中..."

          # 基本的なパフォーマンステスト
          time_start=$(date +%s)

          # 配布スクリプトの実行時間測定
          timeout 300 ./scripts/run-actions.sh --help >/dev/null 2>&1 || true

          time_end=$(date +%s)
          duration=$((time_end - time_start))

          echo "📊 パフォーマンス結果:"
          echo "  - 配布スクリプト応答時間: ${duration}秒"

          # パフォーマンス基準のチェック
          if [[ $duration -gt 30 ]]; then
            echo "⚠️ パフォーマンス警告: 配布スクリプトの応答時間が30秒を超えています"
          else
            echo "✅ パフォーマンス基準を満たしています"
          fi

          echo "✅ パフォーマンス検証完了"

  # ---------------------------------------------------------------------------
  # 品質レポート生成
  # ---------------------------------------------------------------------------
  quality-report-generation:
    name: 📊 品質レポート生成
    runs-on: ubuntu-latest
    needs: [quality-gate-setup, distribution-quality-check, documentation-validation, template-validation, end-to-end-validation, comprehensive-quality-validation]
    if: ${{ always() && needs.quality-gate-setup.outputs.generate-reports == 'true' }}
    timeout-minutes: 10

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 📄 品質レポートアーティファクトダウンロード
        uses: actions/download-artifact@v5
        with:
          pattern: "*-quality-report*"
          merge-multiple: true
        continue-on-error: true

      - name: 📊 統合品質レポート生成
        run: |
          echo "📊 統合品質レポート生成中..."

          # 統合レポートの作成
          cat > quality-gate-report.md << 'EOF'
          # GitHub Actions Simulator - 品質ゲート実行レポート

          ## 実行情報

          - **実行時刻**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **品質レベル**: ${{ needs.quality-gate-setup.outputs.quality-level }}
          - **リリースモード**: ${{ needs.quality-gate-setup.outputs.release-mode }}
          - **イベント**: ${{ github.event_name }}
          - **ブランチ**: ${{ github.ref_name }}
          - **コミット**: ${{ github.sha }}

          ## 品質ゲート結果

          | 検証項目 | 結果 | 詳細 |
          |----------|------|------|
          | 配布スクリプト品質チェック | ${{ needs.distribution-quality-check.result }} | 構文・機能・品質メトリクス |
          | ドキュメント整合性検証 | ${{ needs.documentation-validation.result }} | 整合性・構文・リンク |
          | テンプレート検証 | ${{ needs.template-validation.result }} | 構文・機能・セキュリティ |
          | エンドツーエンド検証 | ${{ needs.end-to-end-validation.result }} | 統合・ビルド・機能 |
          | 包括的品質検証 | ${{ needs.comprehensive-quality-validation.result }} | セキュリティ・パフォーマンス |

          ## 推奨事項

          EOF

          # 結果に基づく推奨事項の追加
          if [[ "${{ needs.distribution-quality-check.result }}" != "success" ]]; then
            echo "- ❌ 配布スクリプトの品質問題を修正してください" >> quality-gate-report.md
          fi

          if [[ "${{ needs.documentation-validation.result }}" != "success" ]]; then
            echo "- ❌ ドキュメントの整合性問題を修正してください" >> quality-gate-report.md
          fi

          if [[ "${{ needs.template-validation.result }}" != "success" ]]; then
            echo "- ❌ テンプレートの検証問題を修正してください" >> quality-gate-report.md
          fi

          if [[ "${{ needs.end-to-end-validation.result }}" != "success" ]]; then
            echo "- ❌ エンドツーエンド検証の問題を修正してください" >> quality-gate-report.md
          fi

          if [[ "${{ needs.comprehensive-quality-validation.result }}" != "success" ]]; then
            echo "- ❌ 包括的品質検証の問題を修正してください" >> quality-gate-report.md
          fi

          # 全て成功の場合
          if [[ "${{ needs.distribution-quality-check.result }}" == "success" ]] && \
             [[ "${{ needs.documentation-validation.result }}" == "success" ]] && \
             [[ "${{ needs.template-validation.result }}" == "success" ]] && \
             [[ "${{ needs.end-to-end-validation.result }}" == "success" ]]; then
            echo "- ✅ すべての品質ゲートが正常に通過しました" >> quality-gate-report.md
            echo "- 🎉 配布品質基準を満たしています" >> quality-gate-report.md
          fi

          echo "" >> quality-gate-report.md
          echo "---" >> quality-gate-report.md
          echo "生成時刻: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> quality-gate-report.md

          echo "✅ 統合品質レポート生成完了"

      - name: 📄 品質レポートアップロード
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-report
          path: |
            quality-gate-report.md
            *-quality-report*
          retention-days: 90

      - name: 📋 GitHub Actions サマリー出力
        run: |
          echo "## 🛡️ 品質ゲート実行結果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 結果テーブルの作成
          echo "| 検証項目 | 結果 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 配布スクリプト品質チェック | ${{ needs.distribution-quality-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ドキュメント整合性検証 | ${{ needs.documentation-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| テンプレート検証 | ${{ needs.template-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| エンドツーエンド検証 | ${{ needs.end-to-end-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 包括的品質検証 | ${{ needs.comprehensive-quality-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 全体結果の判定
          if [[ "${{ needs.distribution-quality-check.result }}" == "success" ]] && \
             [[ "${{ needs.documentation-validation.result }}" == "success" ]] && \
             [[ "${{ needs.template-validation.result }}" == "success" ]] && \
             [[ "${{ needs.end-to-end-validation.result }}" == "success" ]]; then
            echo "✅ **すべての品質ゲートが正常に通過しました**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **品質ゲートで問題が検出されました**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **品質レベル**: ${{ needs.quality-gate-setup.outputs.quality-level }}" >> $GITHUB_STEP_SUMMARY
          echo "🕐 **実行時刻**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # 品質ゲート結果通知
  # ---------------------------------------------------------------------------
  quality-gate-notification:
    name: 📢 品質ゲート結果通知
    runs-on: ubuntu-latest
    needs: [quality-gate-setup, distribution-quality-check, documentation-validation, template-validation, end-to-end-validation, comprehensive-quality-validation, quality-report-generation]
    if: ${{ always() }}
    timeout-minutes: 5

    steps:
      - name: 📊 品質ゲート結果判定
        id: result
        run: |
          # 全体結果の判定
          overall_success="true"

          if [[ "${{ needs.distribution-quality-check.result }}" == "failure" ]]; then
            overall_success="false"
          fi

          if [[ "${{ needs.documentation-validation.result }}" == "failure" ]]; then
            overall_success="false"
          fi

          if [[ "${{ needs.template-validation.result }}" == "failure" ]]; then
            overall_success="false"
          fi

          if [[ "${{ needs.end-to-end-validation.result }}" == "failure" ]]; then
            overall_success="false"
          fi

          if [[ "${{ needs.comprehensive-quality-validation.result }}" == "failure" ]]; then
            overall_success="false"
          fi

          echo "overall-success=$overall_success" >> $GITHUB_OUTPUT

          if [[ "$overall_success" == "true" ]]; then
            echo "🎉 品質ゲート: 全体成功"
          else
            echo "❌ 品質ゲート: 失敗"
          fi

      - name: 📢 プルリクエストコメント
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v8
        with:
          script: |
            const overallSuccess = '${{ steps.result.outputs.overall-success }}' === 'true';
            const qualityLevel = '${{ needs.quality-gate-setup.outputs.quality-level }}';

            const results = {
              '配布スクリプト品質チェック': '${{ needs.distribution-quality-check.result }}',
              'ドキュメント整合性検証': '${{ needs.documentation-validation.result }}',
              'テンプレート検証': '${{ needs.template-validation.result }}',
              'エンドツーエンド検証': '${{ needs.end-to-end-validation.result }}',
              '包括的品質検証': '${{ needs.comprehensive-quality-validation.result }}'
            };

            let comment = `## 🛡️ 品質ゲート実行結果\n\n`;
            comment += `**品質レベル**: ${qualityLevel}\n`;
            comment += `**全体結果**: ${overallSuccess ? '✅ 成功' : '❌ 失敗'}\n\n`;
            comment += `### 詳細結果\n\n`;

            for (const [name, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              comment += `- ${icon} ${name}: ${result}\n`;
            }

            if (!overallSuccess) {
              comment += `\n### 💡 推奨事項\n\n`;
              comment += `失敗した品質ゲートの詳細ログを確認し、問題を修正してください。\n`;
              comment += `詳細な品質レポートはワークフローのアーティファクトからダウンロードできます。\n`;
            }

            comment += `\n---\n`;
            comment += `🕐 実行時刻: ${new Date().toISOString()}\n`;
            comment += `🔗 ワークフロー: [品質ゲート](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 🎯 品質ゲート最終結果
        run: |
          if [[ "${{ steps.result.outputs.overall-success }}" == "true" ]]; then
            echo "🎉 品質ゲートが正常に完了しました"
            echo "✅ 配布品質基準を満たしています"
            exit 0
          else
            echo "❌ 品質ゲートで問題が検出されました"
            echo "🔧 修正が必要な項目があります"
            exit 1
          fi
