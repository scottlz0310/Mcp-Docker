---
name: "📚 Documentation Build & Deploy"

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'main.py'
      - 'services/**/*.py'
      - 'scripts/generate-docs.sh'
      - 'pyproject.toml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'main.py'
      - 'services/**/*.py'
      - 'scripts/generate-docs.sh'
      - 'pyproject.toml'
  workflow_dispatch:
  repository_dispatch:
    types: [release-docs-update]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --group docs

      - name: Generate documentation
        run: |
          chmod +x ./scripts/generate-docs.sh
          ./scripts/generate-docs.sh all

          # リリース時の特別処理
          if [[ "${{ github.event.action }}" == "release-docs-update" ]]; then
            VERSION="${{ github.event.client_payload.version }}"
            echo "📚 Updating documentation for release v$VERSION"
            # バージョン情報をドキュメントに含める処理をここに追加
          fi

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 30

      - name: Setup Pages (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html/

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  doc-quality-check:
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

      - name: Check documentation quality
        run: |
          echo "📊 Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "=============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # HTMLファイル数をカウント
          HTML_COUNT=$(find docs/_build/html -name "*.html" | wc -l)
          echo "📄 Generated HTML files: $HTML_COUNT" >> $GITHUB_STEP_SUMMARY

          # ファイルサイズを確認
          BUILD_SIZE=$(du -sh docs/_build/html | cut -f1)
          echo "💾 Build size: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY

          # 壊れたリンクをチェック（簡易版）
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Link Check:" >> $GITHUB_STEP_SUMMARY

          if [ $HTML_COUNT -gt 0 ]; then
            echo "✅ Documentation build successful" >> $GITHUB_STEP_SUMMARY
            echo "📖 Main pages generated:" >> $GITHUB_STEP_SUMMARY
            find docs/_build/html -maxdepth 1 -name "*.html" | \
              head -10 | sed 's/docs\/_build\/html\///g' | \
              sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No HTML files generated" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  notify-docs-status:
    runs-on: ubuntu-latest
    needs: [build-docs, doc-quality-check]
    if: always()
    steps:
      - name: Documentation Status Summary
        run: |
          echo "📚 Documentation Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          BUILD_STATUS="${{ needs.build-docs.result }}"
          QUALITY_STATUS="${{ needs.doc-quality-check.result }}"

          echo "🏗️  Build: $BUILD_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Quality Check: $QUALITY_STATUS" >> $GITHUB_STEP_SUMMARY

          if [[ "$BUILD_STATUS" == "success" && "$QUALITY_STATUS" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Documentation pipeline completed successfully**" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
              DOC_URL="https://${{ github.repository_owner }}.github.io/$REPO_NAME"
              echo "🌐 Documentation will be available at: $DOC_URL" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Documentation pipeline failed**" >> $GITHUB_STEP_SUMMARY
          fi
