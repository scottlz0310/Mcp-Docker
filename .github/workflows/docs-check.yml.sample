# ドキュメント整合性チェック GitHub Actions ワークフロー
name: Documentation Consistency Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.md'
      - 'docs/**'
      - 'pyproject.toml'
      - '.docs-check.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
      - 'pyproject.toml'
      - '.docs-check.yaml'

jobs:
  docs-check:
    name: Check Documentation Consistency
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run documentation consistency check
      run: |
        uv run python scripts/check-docs-consistency.py \
          --ci-mode \
          --fail-on-issues \
          --output docs-consistency-report.json

    - name: Upload documentation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docs-consistency-report
        path: docs-consistency-report.json

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('docs-consistency-report.json', 'utf8'));
            const totalIssues = report.link_issues.length + report.version_issues.length + report.consistency_issues.length;

            let comment = `## 📚 ドキュメント整合性チェック結果\n\n`;
            comment += `- **チェック対象ファイル数**: ${report.total_files_checked}\n`;
            comment += `- **総問題数**: ${totalIssues}\n\n`;

            if (report.link_issues.length > 0) {
              comment += `### 🔗 リンクの問題 (${report.link_issues.length}件)\n\n`;
              report.link_issues.forEach(issue => {
                comment += `- \`${issue.source_file}:${issue.line_number}\`: ${issue.description}\n`;
              });
              comment += `\n`;
            }

            if (report.version_issues.length > 0) {
              comment += `### 🔢 バージョンの問題 (${report.version_issues.length}件)\n\n`;
              report.version_issues.forEach(issue => {
                comment += `- \`${issue.file_path}:${issue.line_number}\`: ${issue.found_version} → ${issue.expected_version}\n`;
              });
              comment += `\n`;
            }

            if (report.consistency_issues.length > 0) {
              comment += `### 📝 整合性の問題 (${report.consistency_issues.length}件)\n\n`;
              report.consistency_issues.forEach(issue => {
                comment += `- \`${issue.file_path}:${issue.line_number}\`: ${issue.description}\n`;
              });
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('レポートファイルが見つかりません:', error.message);
          }
