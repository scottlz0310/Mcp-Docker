# =============================================================================
# GitHub Actions Simulator - テンプレート検証ワークフロー
# =============================================================================
# このワークフローは、テンプレートファイルの自動検証を行います。
#
# 実行タイミング:
# - プルリクエスト時（テンプレートファイル変更時）
# - メインブランチへのプッシュ時
# - 手動実行時
# - 定期実行（週次）
#
# 検証内容:
# - 構文チェック（YAML, JSON, Shell, Docker）
# - 機能テスト（実際の動作確認）
# - セキュリティチェック（秘密情報検出など）
# - 整合性チェック（ドキュメントとの一致確認）
# =============================================================================

name: Template Validation

on:
  # プルリクエスト時の検証
  pull_request:
    branches: [main, develop]
    paths:
      - '*.sample'
      - '*.example'
      - '*.template'
      - '.env.example'
      - 'docker-compose.override.yml.sample'
      - '.pre-commit-config.yaml.sample'
      - '.github/workflows/*.yml.sample'
      - '.github/workflows/*.yaml.sample'
      - 'scripts/validate-templates.py'
      - 'scripts/ci-validate-templates.sh'
      - 'tests/test_template_validation.py'

  # メインブランチへのプッシュ時
  push:
    branches: [main]
    paths:
      - '*.sample'
      - '*.example'
      - '*.template'
      - '.env.example'
      - 'docker-compose.override.yml.sample'
      - '.pre-commit-config.yaml.sample'
      - '.github/workflows/*.yml.sample'
      - '.github/workflows/*.yaml.sample'

  # 定期実行（毎週月曜日の午前6時 UTC）
  schedule:
    - cron: '0 6 * * 1'

  # 手動実行
  workflow_dispatch:
    inputs:
      validation_mode:
        description: '検証モード'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - syntax-only
          - functionality-only
      output_format:
        description: '出力形式'
        required: false
        default: 'text'
        type: choice
        options:
          - text
          - json
      fail_fast:
        description: '高速失敗モード'
        required: false
        default: false
        type: boolean
      verbose:
        description: '詳細ログ'
        required: false
        default: true
        type: boolean

# 環境変数
env:
  PYTHON_VERSION: '3.13'
  UV_CACHE_DIR: /tmp/.uv-cache
  PYTHONUNBUFFERED: 1
  TEMPLATE_VALIDATION_TIMEOUT: 300

# 権限設定
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ---------------------------------------------------------------------------
  # 高速構文チェック
  # ---------------------------------------------------------------------------
  syntax-check:
    name: 🔍 構文チェック
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 システムツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint

          # hadolintのインストール
          HADOLINT_VERSION="2.12.0"
          wget -O /tmp/hadolint "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint
          sudo mv /tmp/hadolint /usr/local/bin/hadolint

      - name: 🔍 テンプレート構文チェック実行
        run: |
          echo "🔍 テンプレート構文チェックを実行中..."

          validation_args="--check-only"

          if [[ "${{ github.event.inputs.verbose }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            validation_args="$validation_args --verbose"
          fi

          if [[ "${{ github.event.inputs.fail_fast }}" == "true" ]]; then
            validation_args="$validation_args --fail-fast"
          fi

          ./scripts/ci-validate-templates.sh $validation_args

      - name: 📊 構文チェック結果サマリー
        if: always()
        run: |
          echo "📊 構文チェック完了"
          echo "  - YAML/JSON構文チェック: 完了"
          echo "  - Shell構文チェック: 完了"
          echo "  - Docker構文チェック: 完了"
          echo "  - 環境変数ファイル構文チェック: 完了"

  # ---------------------------------------------------------------------------
  # 機能テスト
  # ---------------------------------------------------------------------------
  functionality-test:
    name: 🧪 機能テスト
    runs-on: ubuntu-latest
    needs: syntax-check
    timeout-minutes: 20
    if: ${{ github.event.inputs.validation_mode != 'syntax-only' }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 🐳 Docker環境セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 追加ツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint

          # hadolintのインストール
          HADOLINT_VERSION="2.12.0"
          wget -O /tmp/hadolint "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint
          sudo mv /tmp/hadolint /usr/local/bin/hadolint

          # pre-commitのインストール
          pip install pre-commit

          # actのインストール（オプション）
          if ! command -v act >/dev/null 2>&1; then
            echo "⚠️ actはインストールされていません（機能テストの一部がスキップされます）"
          fi

      - name: 🧪 テンプレート機能テスト実行
        run: |
          echo "🧪 テンプレート機能テストを実行中..."

          validation_args="--test-only"

          if [[ "${{ github.event.inputs.verbose }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            validation_args="$validation_args --verbose"
          fi

          if [[ "${{ github.event.inputs.fail_fast }}" == "true" ]]; then
            validation_args="$validation_args --fail-fast"
          fi

          ./scripts/ci-validate-templates.sh $validation_args

      - name: 📊 機能テスト結果サマリー
        if: always()
        run: |
          echo "📊 機能テスト完了"
          echo "  - Docker Compose機能テスト: 完了"
          echo "  - GitHub Workflow機能テスト: 完了"
          echo "  - pre-commit機能テスト: 完了"
          echo "  - 環境変数ファイル機能テスト: 完了"

  # ---------------------------------------------------------------------------
  # 完全検証（構文 + 機能 + セキュリティ）
  # ---------------------------------------------------------------------------
  full-validation:
    name: 🔒 完全検証
    runs-on: ubuntu-latest
    needs: [syntax-check]
    timeout-minutes: 25
    if: ${{ github.event.inputs.validation_mode != 'syntax-only' && github.event.inputs.validation_mode != 'functionality-only' }}

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 🐳 Docker環境セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🔧 全ツールインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint jq

          # hadolintのインストール
          HADOLINT_VERSION="2.12.0"
          wget -O /tmp/hadolint "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-x86_64"
          chmod +x /tmp/hadolint
          sudo mv /tmp/hadolint /usr/local/bin/hadolint

          # pre-commitのインストール
          pip install pre-commit

          # Trivyのインストール（セキュリティスキャン用）
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: 🔒 完全テンプレート検証実行
        run: |
          echo "🔒 完全テンプレート検証を実行中..."

          validation_args=""
          output_format="${{ github.event.inputs.output_format || 'text' }}"

          if [[ "$output_format" == "json" ]]; then
            validation_args="$validation_args --format json --output template-validation-report.json"
          fi

          if [[ "${{ github.event.inputs.verbose }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            validation_args="$validation_args --verbose"
          fi

          if [[ "${{ github.event.inputs.fail_fast }}" == "true" ]]; then
            validation_args="$validation_args --fail-fast"
          fi

          ./scripts/ci-validate-templates.sh $validation_args

      - name: 📊 検証結果アップロード
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: template-validation-results
          path: |
            template-validation-report.json
            template-validation-summary.txt
          retention-days: 30

      - name: 📋 検証結果サマリー表示
        if: always()
        run: |
          echo "📊 完全検証結果サマリー"

          if [[ -f "template-validation-report.json" ]] && command -v jq >/dev/null 2>&1; then
            echo "📋 JSON検証結果:"
            jq -r '
              "総テンプレート数: " + (.total_templates | tostring) + "\n" +
              "有効なテンプレート: " + (.valid_templates | tostring) + "\n" +
              "無効なテンプレート: " + (.invalid_templates | tostring) + "\n" +
              "警告があるテンプレート: " + (.templates_with_warnings | tostring) + "\n" +
              "成功率: " + ((.valid_templates / .total_templates * 100) | floor | tostring) + "%"
            ' template-validation-report.json
          fi

          if [[ -f "template-validation-summary.txt" ]]; then
            echo ""
            echo "📋 要約レポート:"
            cat template-validation-summary.txt
          fi

  # ---------------------------------------------------------------------------
  # テンプレート検証システムのテスト
  # ---------------------------------------------------------------------------
  validation-system-test:
    name: 🧪 検証システムテスト
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 🐍 Python環境セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: ⚡ uv インストール
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: 📦 依存関係インストール
        run: |
          uv sync --group test --group dev

      - name: 🧪 検証システム単体テスト実行
        run: |
          echo "🧪 テンプレート検証システムの単体テストを実行中..."
          uv run pytest tests/test_template_validation.py -v --tb=short

      - name: 🔍 検証スクリプト動作確認
        run: |
          echo "🔍 検証スクリプトの基本動作を確認中..."

          # 構文チェックのみのテスト
          python3 scripts/validate-templates.py --check-only --verbose

          echo "✅ 検証システムの動作確認完了"

  # ---------------------------------------------------------------------------
  # 結果サマリー
  # ---------------------------------------------------------------------------
  validation-summary:
    name: 📊 検証サマリー
    runs-on: ubuntu-latest
    needs: [syntax-check, functionality-test, full-validation, validation-system-test]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📥 ソースコード取得
        uses: actions/checkout@v5

      - name: 📊 検証結果サマリー生成
        run: |
          echo "📊 GitHub Actions Simulator - テンプレート検証結果サマリー"
          echo "============================================================"
          echo ""
          echo "🕐 実行時刻: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 コミット: ${{ github.sha }}"
          echo "🌿 ブランチ: ${{ github.ref_name }}"
          echo "🎯 イベント: ${{ github.event_name }}"
          echo ""

          # ジョブ結果の確認
          echo "📋 ジョブ実行結果:"
          echo "  🔍 構文チェック: ${{ needs.syntax-check.result }}"
          echo "  🧪 機能テスト: ${{ needs.functionality-test.result }}"
          echo "  🔒 完全検証: ${{ needs.full-validation.result }}"
          echo "  🧪 検証システムテスト: ${{ needs.validation-system-test.result }}"
          echo ""

          # 全体的な成功/失敗判定
          overall_status="success"

          if [[ "${{ needs.syntax-check.result }}" != "success" ]]; then
            overall_status="failure"
            echo "❌ 構文チェックに失敗しました"
          fi

          if [[ "${{ needs.functionality-test.result }}" == "failure" ]]; then
            overall_status="failure"
            echo "❌ 機能テストに失敗しました"
          fi

          if [[ "${{ needs.full-validation.result }}" == "failure" ]]; then
            overall_status="failure"
            echo "❌ 完全検証に失敗しました"
          fi

          if [[ "${{ needs.validation-system-test.result }}" != "success" ]]; then
            overall_status="failure"
            echo "❌ 検証システムテストに失敗しました"
          fi

          echo ""
          if [[ "$overall_status" = "success" ]]; then
            echo "✅ 全体結果: 成功"
            echo ""
            echo "🎉 すべてのテンプレート検証が正常に完了しました！"
            echo ""
            echo "📋 確認された項目:"
            echo "  - テンプレートファイルの構文正確性"
            echo "  - 実際の動作機能の確認"
            echo "  - セキュリティ問題の検出"
            echo "  - 検証システム自体の動作確認"
          else
            echo "❌ 全体結果: 失敗"
            echo ""
            echo "🔧 対応が必要な項目があります。詳細は各ジョブのログを確認してください。"
            echo ""
            echo "💡 トラブルシューティング:"
            echo "  1. 失敗したジョブのログを確認"
            echo "  2. ローカルで検証を実行: make validate-templates"
            echo "  3. 個別チェック: make validate-templates-syntax"
            echo "  4. 機能テスト: make validate-templates-functionality"
          fi

          echo ""
          echo "============================================================"

      - name: 📊 GitHub Actions サマリー出力
        if: always()
        run: |
          echo "## 📊 テンプレート検証結果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| ジョブ | 結果 | 説明 |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 構文チェック | ${{ needs.syntax-check.result }} | YAML/JSON/Shell/Docker構文の検証 |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 機能テスト | ${{ needs.functionality-test.result }} | テンプレートの実際の動作確認 |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 完全検証 | ${{ needs.full-validation.result }} | 構文+機能+セキュリティの包括的検証 |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 検証システムテスト | ${{ needs.validation-system-test.result }} | 検証システム自体の動作確認 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.syntax-check.result }}" == "success" ]] && \
             [[ "${{ needs.functionality-test.result }}" != "failure" ]] && \
             [[ "${{ needs.full-validation.result }}" != "failure" ]] && \
             [[ "${{ needs.validation-system-test.result }}" == "success" ]]; then
            echo "✅ **すべてのテンプレート検証が正常に完了しました！**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **テンプレート検証で問題が検出されました。詳細は各ジョブのログを確認してください。**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 ローカルでの検証方法" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# 完全な検証" >> $GITHUB_STEP_SUMMARY
          echo "make validate-templates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 構文チェックのみ" >> $GITHUB_STEP_SUMMARY
          echo "make validate-templates-syntax" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 機能テストのみ" >> $GITHUB_STEP_SUMMARY
          echo "make validate-templates-functionality" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
