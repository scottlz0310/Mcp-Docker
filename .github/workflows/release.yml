---
name: 🚀 Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: >
          Release version (e.g., 1.0.1). Check Action Summary for current version info
          after starting workflow.
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            PRERELEASE="false"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "Target version: $VERSION"
          echo "Prerelease: $PRERELEASE"

      - name: Display current version information
        run: |
          echo "📦 Version Information Summary" >> $GITHUB_STEP_SUMMARY
          echo "=============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 現在のバージョン情報を取得・表示
          chmod +x ./scripts/get-current-version.sh
          ./scripts/get-current-version.sh | tee -a $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Target Release Version: v${{ steps.version.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Prerelease: ${{ steps.version.outputs.is-prerelease }}**" >> $GITHUB_STEP_SUMMARY

      - name: Smart version check
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          TARGET_VERSION="${{ steps.version.outputs.version }}"

          echo "📦 Version Information:"
          echo "  pyproject.toml: $CURRENT_VERSION"

          # Check main.py version if exists
          if [[ -f "main.py" ]]; then
            MAIN_PY_VERSION=$(grep '^__version__ = ' main.py | sed 's/__version__ = "\(.*\)"/\1/')
            echo "  main.py: $MAIN_PY_VERSION"

            if [[ "$CURRENT_VERSION" != "$MAIN_PY_VERSION" ]]; then
              echo "  ⚠️  Version mismatch detected between pyproject.toml and main.py!"
            fi
          fi

          echo "  Target: $TARGET_VERSION"

          # Version comparison using sort -V
          if [[ "$CURRENT_VERSION" == "$TARGET_VERSION" ]]; then
            echo "✅ Version unchanged: $TARGET_VERSION"
          elif printf '%s\n%s\n' "$CURRENT_VERSION" "$TARGET_VERSION" | \
               sort -V -C; then
            echo "🔄 Version upgrade: $CURRENT_VERSION → $TARGET_VERSION"
            # Update version in pyproject.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$TARGET_VERSION\"/" pyproject.toml

            # Update version in main.py if exists
            if [[ -f "main.py" ]]; then
              sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$TARGET_VERSION\"/" main.py
              echo "✅ Updated main.py version: $CURRENT_VERSION → $TARGET_VERSION"
            fi

            # Commit version update
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add pyproject.toml main.py
            git commit -m "chore: bump version to $TARGET_VERSION" || true
            git push || true
          else
            echo "❌ Error: Version downgrade not allowed" \
                 "($CURRENT_VERSION → $TARGET_VERSION)"
            exit 1
          fi

  quality-check:
    name: Quality Assurance
    needs: version-check
    uses: ./.github/workflows/ci.yml
    permissions:
      contents: read
      security-events: write

  prepare-release:
    runs-on: ubuntu-latest
    needs: [version-check, quality-check]
    outputs:
      changes-made: ${{ steps.changelog.outputs.changes-made }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Generate CHANGELOG
        id: changelog
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          CHANGELOG_FILE="CHANGELOG.md"

          # Create CHANGELOG if not exists
          if [[ ! -f "$CHANGELOG_FILE" ]]; then
            cat > "$CHANGELOG_FILE" << 'EOF'
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          EOF
          fi

          # Check if version already exists
          if grep -q "## \[$VERSION\]" "$CHANGELOG_FILE"; then
            echo "Version $VERSION already exists in CHANGELOG, updating date only"
            sed -i "s/## \[$VERSION\] - .*/## [$VERSION] - $(date -u +%Y-%m-%d)/" "$CHANGELOG_FILE"
            echo "changes-made=true" >> $GITHUB_OUTPUT
          else
            # Generate new changelog entry from git history
            echo "Generating new CHANGELOG entry for $VERSION"

            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -n "$LAST_TAG" ]]; then
              COMMITS=$(git log --pretty=format:"%s" "$LAST_TAG"..HEAD)
            else
              COMMITS=$(git log --pretty=format:"%s")
            fi

            # Create temporary changelog entry
            TEMP_ENTRY=$(mktemp)
            echo "## [$VERSION] - $(date -u +%Y-%m-%d)" > "$TEMP_ENTRY"
            echo "" >> "$TEMP_ENTRY"

            # Categorize commits
            FEATURES=""
            FIXES=""
            DOCS=""
            OTHERS=""

            while IFS= read -r commit; do
              if [[ "$commit" =~ ^feat(\(.+\))?:\ (.+) ]]; then
                FEATURES="$FEATURES- ${BASH_REMATCH[2]}\n"
              elif [[ "$commit" =~ ^fix(\(.+\))?:\ (.+) ]]; then
                FIXES="$FIXES- ${BASH_REMATCH[2]}\n"
              elif [[ "$commit" =~ ^docs(\(.+\))?:\ (.+) ]]; then
                DOCS="$DOCS- ${BASH_REMATCH[2]}\n"
              else
                OTHERS="$OTHERS- $commit\n"
              fi
            done <<< "$COMMITS"

            # Add sections if they have content
            if [[ -n "$FEATURES" ]]; then
              echo "### ✨ 新機能" >> "$TEMP_ENTRY"
              echo -e "$FEATURES" >> "$TEMP_ENTRY"
            fi

            if [[ -n "$FIXES" ]]; then
              echo "### 🐛 修正" >> "$TEMP_ENTRY"
              echo -e "$FIXES" >> "$TEMP_ENTRY"
            fi

            if [[ -n "$DOCS" ]]; then
              echo "### 📝 ドキュメント" >> "$TEMP_ENTRY"
              echo -e "$DOCS" >> "$TEMP_ENTRY"
            fi

            if [[ -n "$OTHERS" ]]; then
              echo "### 🔧 その他" >> "$TEMP_ENTRY"
              echo -e "$OTHERS" >> "$TEMP_ENTRY"
            fi

            # If no categorized commits, add a generic entry
            if [[ -z "$FEATURES$FIXES$DOCS$OTHERS" ]]; then
              echo "### 🔧 その他" >> "$TEMP_ENTRY"
              echo "- リリース $VERSION" >> "$TEMP_ENTRY"
              echo "" >> "$TEMP_ENTRY"
            fi

            # Insert new entry after header
            sed -i '/^# Changelog/r '"$TEMP_ENTRY" "$CHANGELOG_FILE"
            rm "$TEMP_ENTRY"
            echo "changes-made=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"

          # Extract release notes from CHANGELOG
          awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release-notes.md

          echo "Generated release notes:"
          cat release-notes.md

      - name: Commit changes
        if: steps.changelog.outputs.changes-made == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for" \
                     " v${{ needs.version-check.outputs.version }}" || exit 0
          git push

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  create-release:
    runs-on: ubuntu-latest
    needs: [version-check, prepare-release]
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Download release notes
        uses: actions/download-artifact@v5
        with:
          name: release-notes

      - name: Build packages
        run: |
          # Create distribution directory
          mkdir -p dist/

          # Create source distribution
          tar -czf "dist/mcp-docker-${{ needs.version-check.outputs.version }}.tar.gz" \
            --exclude='.git*' \
            --exclude='dist' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            .

      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.version-check.outputs.version }}" \
                  -m "Release v${{ needs.version-check.outputs.version }}"
          git push origin "v${{ needs.version-check.outputs.version }}"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: Release v${{ needs.version-check.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.version-check.outputs.is-prerelease }}
          files: |
            dist/mcp-docker-${{ needs.version-check.outputs.version }}.tar.gz
            CHANGELOG.md
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG with release content
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          CHANGELOG_FILE="CHANGELOG.md"

          echo "Waiting for release to be fully created..."
          sleep 10

          # Get the actual release body from GitHub API to ensure consistency
          RELEASE_BODY=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | \
            jq -r '.body // empty')

          if [[ -n "$RELEASE_BODY" ]] && [[ "$RELEASE_BODY" != "null" ]]; then
            echo "Found release body content, updating CHANGELOG..."

            # Create a backup
            cp "$CHANGELOG_FILE" "${CHANGELOG_FILE}.backup"

            # Find the current version section
            VERSION_LINE=$(grep -n "## \[$VERSION\]" "$CHANGELOG_FILE" | cut -d: -f1)
            if [[ -n "$VERSION_LINE" ]]; then
              # Find the next version section to know where to stop
              NEXT_VERSION_LINE=$(tail -n +$((VERSION_LINE + 1)) "$CHANGELOG_FILE" | \
                                 grep -n "## \[" | head -1 | cut -d: -f1)

              if [[ -n "$NEXT_VERSION_LINE" ]]; then
                NEXT_VERSION_LINE=$((VERSION_LINE + NEXT_VERSION_LINE))
              else
                NEXT_VERSION_LINE=$(wc -l < "$CHANGELOG_FILE")
                NEXT_VERSION_LINE=$((NEXT_VERSION_LINE + 1))
              fi

              # Create new content combining existing and release page content
              TEMP_FILE=$(mktemp)

              # Copy everything before the version section
              sed -n "1,$((VERSION_LINE - 1))p" "$CHANGELOG_FILE" > "$TEMP_FILE"

              # Add the version header
              echo "## [$VERSION] - $(date -u +%Y-%m-%d)" >> "$TEMP_FILE"
              echo "" >> "$TEMP_FILE"

              # Add release body content (formatted for markdown)
              echo "$RELEASE_BODY" | sed 's/^//' >> "$TEMP_FILE"
              echo "" >> "$TEMP_FILE"

              # Add existing detailed content if it exists and is different
              EXISTING_CONTENT=$(sed -n "$((VERSION_LINE + 2)),$((NEXT_VERSION_LINE - 1))p" \
                                "$CHANGELOG_FILE" | grep -v "^$")
              if [[ -n "$EXISTING_CONTENT" ]] && \
                 ! echo "$RELEASE_BODY" | grep -q "🚀.*完全自動化"; then
                echo "### 📋 詳細機能説明" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
                echo "$EXISTING_CONTENT" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
              fi

              # Add synchronization marker
              echo "<!-- リリースページ統合済み: $(date -u +%Y-%m-%d) -->" >> "$TEMP_FILE"
              echo "" >> "$TEMP_FILE"

              # Copy everything after the current version section
              tail -n +$NEXT_VERSION_LINE "$CHANGELOG_FILE" >> "$TEMP_FILE"

              # Replace the original file
              mv "$TEMP_FILE" "$CHANGELOG_FILE"

              echo "CHANGELOG successfully updated with release page content"
            else
              echo "Version section not found in CHANGELOG"
            fi
          else
            echo "No release body found or release not yet available"
          fi

      - name: Commit updated CHANGELOG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: sync CHANGELOG with release page content" \
                       " for v${{ needs.version-check.outputs.version }}"
            git push
          fi

  update-docs:
    runs-on: ubuntu-latest
    needs: [version-check, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Trigger documentation update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: release-docs-update
          client-payload: '{"version": "${{ needs.version-check.outputs.version }}"}'

  post-release:
    runs-on: ubuntu-latest
    needs: [version-check, create-release, update-docs]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Record release metrics
        run: |
          echo "🎉 Release v${{ needs.version-check.outputs.version }} completed successfully!"
          echo "Prerelease: ${{ needs.version-check.outputs.is-prerelease }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "📚 Documentation update triggered"
