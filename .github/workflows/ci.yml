---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call: # 再利用可能ワークフローとして使用可能にする

permissions:
  contents: read
  security-events: write
  checks: write

jobs:
  fast-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # 明示的なタイムアウト設定
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install linting tools
        run: |
          # shellcheckは既にプリインストールされている
          # yamllint, ruffのみインストール
          pip install yamllint ruff

      # fast-lintでは依存関係のインストールは不要（ruffのみで十分）

      - name: Run ruff (Python)
        run: ruff check .

      - name: Run shellcheck (Shell)
        run: |
          # Note: --severity=error でエラーレベルのみチェック（warning/infoは許容）
          find . -name "*.sh" -type f -not -path "./.venv/*" -not -path "./node_modules/*" -exec shellcheck --severity=error {} +

      - name: Run yamllint (YAML)
        run: yamllint .

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Run MegaLinter
        run: |
          # Note: 常に全ファイルをチェック（VALIDATE_ALL_CODEBASE=true）
          # 変更ファイルのみチェックする場合は、VALIDATE_ALL_CODEBASE=falseにして
          # GitHub Actionsの環境変数を活用する必要がある
          docker run --rm \
            -v $(pwd):/tmp/lint \
            -e APPLY_FIXES=none \
            -e DEFAULT_WORKSPACE=/tmp/lint \
            -e MEGALINTER_CONFIG=.mega-linter.yml \
            -e VALIDATE_ALL_CODEBASE=true \
            oxsecurity/megalinter:v7

      - name: Upload MegaLinter reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mega-linter-reports
          path: megalinter-reports/
          if-no-files-found: warn

  build:
    runs-on: ubuntu-latest
    needs: fast-lint
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image with buildx
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64 # 将来的に linux/amd64,linux/arm64 対応予定
          push: false
          load: true # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Display Docker images
        run: |
          if command -v docker >/dev/null 2>&1; then
            docker images
          else
            echo "Docker not available in this environment"
          fi

      - name: Test Docker image basic functionality
        run: |
          if command -v docker >/dev/null 2>&1; then
            # Test main.py version command
            docker run --rm mcp-docker:latest python /app/main.py --version
            # Test default command (mcp-server-github)
            # Note: MCPサーバーは--helpでエラーコードを返す可能性があるため、出力のみ確認
            docker run --rm mcp-docker:latest --help > /dev/null 2>&1 || echo "MCP server executed (exit code expected)"
            # Inspect image
            docker inspect mcp-docker:latest
          else
            echo "Docker not available in this environment - skipping tests"
            exit 0
          fi

  security:
    runs-on: ubuntu-latest
    needs: fast-lint # buildジョブに依存せず、fast-lintのみに依存
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for security scan
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: "mcp-docker:latest"
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
          trivyignores: ".trivyignore"
          ignore-unfixed: true
          skip-dirs: "__pycache__,.git,node_modules"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy for PR comment
        uses: aquasecurity/trivy-action@0.33.1
        if: github.event_name == 'pull_request'
        with:
          image-ref: "mcp-docker:latest"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"
          trivyignores: ".trivyignore"
          ignore-unfixed: true
          skip-dirs: "__pycache__,.git,node_modules"

  pytest:
    name: 🧪 Pytest (unit/integration/e2e)
    runs-on: ubuntu-latest
    needs: fast-lint
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install act
        run: |
          # Note: -b オプションでインストール先を指定（デフォルトは./bin）
          curl -fsSL https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash -s -- -b /usr/local/bin
          act --version

      - name: Install dependencies
        run: uv sync --group test

      - name: Run pytest (unit tests)
        id: unit-tests
        run: |
          uv run pytest tests/unit/ -v --tb=short --maxfail=5
        continue-on-error: false

      - name: Run pytest (integration tests - actions)
        id: integration-actions
        run: |
          # テストファイルが存在する場合のみ実行
          if find tests/integration/actions/ -name "test_*.py" -o -name "*_test.py" 2>/dev/null | grep -q .; then
            uv run pytest tests/integration/actions/ -v --tb=short
          else
            echo "No Python test files found in tests/integration/actions/, skipping..."
            exit 0
          fi

      - name: Run pytest (integration tests - services)
        id: integration-services
        run: |
          # tests/integration/services/ には Python テストがない場合があるため、
          # 存在する場合のみ実行
          if find tests/integration/services/ -name "test_*.py" -o -name "*_test.py" 2>/dev/null | grep -q .; then
            uv run pytest tests/integration/services/ -v --tb=short
          else
            echo "No Python test files found in tests/integration/services/, skipping..."
            exit 0
          fi

      - name: Run pytest (integration tests - common)
        id: integration-common
        run: |
          # テストファイルが存在する場合のみ実行
          if find tests/integration/common/ -name "test_*.py" -o -name "*_test.py" 2>/dev/null | grep -q .; then
            uv run pytest tests/integration/common/ -v --tb=short
          else
            echo "No Python test files found in tests/integration/common/, skipping..."
            exit 0
          fi

      - name: Run pytest (e2e tests - selected)
        id: e2e-tests
        run: |
          uv run pytest tests/e2e/test_comprehensive_integration.py -v --tb=short

      - name: Summary test results
        if: always()
        run: |
          echo "## テスト結果サマリ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ steps.unit-tests.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration (Actions): ${{ steps.integration-actions.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration (Services): ${{ steps.integration-services.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration (Common): ${{ steps.integration-common.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ steps.e2e-tests.outcome }}" >> $GITHUB_STEP_SUMMARY

  bats-test:
    name: 🧪 Bats Test (shell scripts)
    runs-on: ubuntu-latest
    needs: fast-lint
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest

      - name: Install Bats
        run: |
          echo "🔍 Environment Detection"
          echo "OS: $(uname -s) $(uname -r)"
          echo "User: $(whoami) (UID: $(id -u))"
          echo "Groups: $(groups)"

          # ========================================
          # STEP 1: 権限レベル検証（非インタラクティブ限定）
          # ========================================
          ROOT_USER=false
          SUDO_NOPASSWD=false

          echo "🔐 Permission Level Detection (Non-Interactive Only)"

          if [ "$(id -u)" -eq 0 ]; then
            echo "✅ Running as root user"
            ROOT_USER=true
          elif timeout 2 sudo -n true 2>/dev/null; then
            echo "✅ sudo available without password"
            SUDO_NOPASSWD=true
          else
            echo "ℹ️  No passwordless sudo - will use user-space alternatives"
            echo "   This is normal and expected in most local environments"
          fi

          # ========================================
          # STEP 2: パッケージマネージャー検証
          # ========================================
          echo ""
          echo "📦 Package Manager Detection"
          APT_AVAILABLE=false
          BREW_AVAILABLE=false
          YUM_AVAILABLE=false

          if command -v apt-get >/dev/null 2>&1; then
            echo "✅ apt-get available"
            APT_AVAILABLE=true
          fi

          if command -v brew >/dev/null 2>&1; then
            echo "✅ brew available"
            BREW_AVAILABLE=true
          fi

          if command -v yum >/dev/null 2>&1; then
            echo "✅ yum available"
            YUM_AVAILABLE=true
          fi

          # ========================================
          # STEP 3: インストール戦略決定・実行
          # ========================================
          echo ""
          echo "🎯 Installation Strategy Selection"

          INSTALL_SUCCESS=false

          # 戦略1: Root + apt
          if [ "$ROOT_USER" = true ] && [ "$APT_AVAILABLE" = true ]; then
            echo "📋 Strategy 1: Root + apt-get"
            if apt-get update && apt-get install -y bats; then
              echo "✅ Strategy 1 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "❌ Strategy 1 failed"
            fi
          fi

          # 戦略2: sudo(no-passwd) + apt
          if [ "$INSTALL_SUCCESS" = false ] && [ "$SUDO_NOPASSWD" = true ] && [ "$APT_AVAILABLE" = true ]; then
            echo "📋 Strategy 2: sudo(no-passwd) + apt-get"
            if timeout 10 sudo apt-get update && timeout 30 sudo apt-get install -y bats; then
              echo "✅ Strategy 2 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "❌ Strategy 2 failed"
            fi
          fi

          # 戦略3: brew (パスワード不要)
          if [ "$INSTALL_SUCCESS" = false ] && [ "$BREW_AVAILABLE" = true ]; then
            echo "📋 Strategy 3: brew install"
            if brew install bats-core; then
              echo "✅ Strategy 3 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "❌ Strategy 3 failed"
            fi
          fi

          # 戦略4: Manual installation (最終フォールバック)
          if [ "$INSTALL_SUCCESS" = false ]; then
            echo "📋 Strategy 4: Manual installation (fallback)"
            echo "Downloading bats-core from GitHub..."
            if command -v wget >/dev/null 2>&1; then
              DOWNLOAD_CMD="wget -O"
            elif command -v curl >/dev/null 2>&1; then
              DOWNLOAD_CMD="curl -L -o"
            else
              echo "❌ No download tool available (wget/curl)"
              exit 1
            fi

            # ユーザーディレクトリにインストール
            mkdir -p "$HOME/bin" "$HOME/.local/bin"
            cd /tmp

            if $DOWNLOAD_CMD bats-core.tar.gz https://github.com/bats-core/bats-core/archive/v1.10.0.tar.gz && \
              tar -xzf bats-core.tar.gz && \
              (cd bats-core-1.10.0 && ./install.sh "$HOME"); then

              # PATH設定
              export PATH="$HOME/bin:$PATH"
              # Note: .bashrcが存在しない場合もあるため、エラーを無視
              echo "export PATH=\"\$HOME/bin:\$PATH\"" >> "$HOME/.bashrc" 2>/dev/null || true

              # GitHub Actions環境変数設定
              if [ -n "$GITHUB_ENV" ]; then
                echo "PATH=$HOME/bin:$PATH" >> "$GITHUB_ENV"
              fi

              echo "✅ Strategy 4 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "❌ Strategy 4 failed"
            fi
          fi

          # ========================================
          # STEP 4: インストール確認
          # ========================================
          echo ""
          echo "🔬 Installation Verification"

          # PATH確認・更新
          export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

          if command -v bats >/dev/null 2>&1; then
            BATS_PATH=$(which bats)
            BATS_VERSION=$(bats --version)
            echo "✅ Bats installation successful"
            echo "   Path: $BATS_PATH"
            echo "   Version: $BATS_VERSION"
          else
            echo "❌ Bats installation failed - not found in PATH"
            echo "   Current PATH: $PATH"
            echo "   Contents of \$HOME/bin: $(ls -la $HOME/bin/ 2>/dev/null || echo 'directory not found')"
            exit 1
          fi

      - name: Run Bats test suite
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          # PATH設定（Alpine等の環境対応）
          export PATH=$HOME/bin:$PATH

          echo "Running environment check..."
          echo "Bats location: $(which bats || echo 'not found')"
          echo "Docker availability: $(command -v docker >/dev/null && echo 'available' || echo 'not available')"
          echo "Make availability: $(command -v make >/dev/null && echo 'available' || echo 'not available')"

          # テスト実行（新しいテスト構造に対応）
          if command -v bats >/dev/null 2>&1; then
            echo "🧪 Running integration bats tests..."

            # Actions Simulatorテスト
            if ls tests/integration/actions/*.bats 1> /dev/null 2>&1; then
              echo "Running actions tests..."
              bats tests/integration/actions/*.bats
            fi

            # サービス統合テスト
            if ls tests/integration/services/*.bats 1> /dev/null 2>&1; then
              echo "Running services tests..."
              bats tests/integration/services/*.bats
            fi

            # 共通テスト
            if ls tests/integration/common/*.bats 1> /dev/null 2>&1; then
              echo "Running common tests..."
              bats tests/integration/common/*.bats
            fi

            # ルートに残っている.batsファイル
            if ls tests/integration/*.bats 1> /dev/null 2>&1; then
              echo "Running root level tests..."
              bats tests/integration/*.bats
            fi
          else
            echo "❌ Bats not available - tests cannot run"
            exit 1
          fi

      - name: Cleanup
        if: always()
        # Note: サービスが起動していない場合もあるため、エラーを無視
        run: docker compose down -v || true

  docker-services-integration:
    name: 🐳 Docker Services Integration
    runs-on: ubuntu-latest
    needs: fast-lint
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --group test

      - name: Build and start services
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          docker compose build
          docker compose up -d github-mcp datetime-validator actions-simulator
          sleep 30

      - name: Check service health
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          echo "🔍 Service Health Check"
          docker compose ps
          echo ""
          echo "📜 Service Logs"
          docker compose logs --tail=50

      - name: Run service integration tests
        id: service-tests
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          echo "🧪 Running Docker service integration tests..."
          # tests/integration/services/ には Python テストがない場合があるため、
          # 存在する場合のみ実行
          if find tests/integration/services/ -name "test_*.py" -o -name "*_test.py" 2>/dev/null | grep -q .; then
            uv run pytest tests/integration/services/ -v --tb=short
          else
            echo "No Python test files found in tests/integration/services/, skipping..."
            exit 0
          fi

      - name: Cleanup
        if: always()
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: docker compose down -v
