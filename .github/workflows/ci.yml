---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:  # ÂÜçÂà©Áî®ÂèØËÉΩ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„Å®„Åó„Å¶‰ΩøÁî®ÂèØËÉΩ„Å´„Åô„Çã

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,DL3018

      - name: Lint Shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \;

      - name: Lint YAML files
        run: |
          pip install --break-system-packages yamllint
          # .yamllint.yml„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅßÂÆüË°å
          if [ -f .yamllint.yml ]; then
            yamllint -c .yamllint.yml docker-compose.yml
          else
            yamllint docker-compose.yml
          fi

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image with buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Â∞ÜÊù•ÁöÑ„Å´ linux/amd64,linux/arm64 ÂØæÂøú‰∫àÂÆö
          push: false
          load: true  # „É≠„Éº„Ç´„É´„ÅÆDocker daemon„Å´Ë™≠„ÅøËæº„Åø
          tags: mcp-docker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d /tmp/.buildx-cache-new ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Display Docker images
        run: |
          if command -v docker >/dev/null 2>&1; then
            docker images
          else
            echo "Docker not available in this environment"
          fi

      - name: Test Docker image basic functionality
        run: |
          if command -v docker >/dev/null 2>&1; then
            # Test main.py version command
            docker run --rm mcp-docker:latest python /app/main.py --version
            # Test default command (mcp-server-github)
            docker run --rm mcp-docker:latest --help || true
            # Inspect image
            docker inspect mcp-docker:latest
          else
            echo "Docker not available in this environment - skipping tests"
          fi

  security:
    runs-on: ubuntu-latest
    needs: lint  # build„Ç∏„Éß„Éñ„Å´‰æùÂ≠ò„Åõ„Åö„ÄÅlint„ÅÆ„Åø„Å´‰æùÂ≠ò
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for security scan
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # „É≠„Éº„Ç´„É´„ÅÆDocker daemon„Å´Ë™≠„ÅøËæº„Åø
          tags: mcp-docker:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: 'mcp-docker:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          trivyignores: '.trivyignore'
          ignore-unfixed: true
          skip-dirs: '__pycache__,.git,node_modules'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for PR comment
        uses: aquasecurity/trivy-action@0.33.1
        if: github.event_name == 'pull_request'
        with:
          image-ref: 'mcp-docker:latest'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          trivyignores: '.trivyignore'
          ignore-unfixed: true
          skip-dirs: '__pycache__,.git,node_modules'

  test:
    runs-on: ubuntu-latest
    needs: lint  # build„Ç∏„Éß„Éñ„Å´‰æùÂ≠ò„Åõ„Åö„ÄÅlint„ÅÆ„Åø„Å´‰æùÂ≠ò
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # „É≠„Éº„Ç´„É´„ÅÆDocker daemon„Å´Ë™≠„ÅøËæº„Åø
          tags: mcp-docker:latest

      - name: Install Bats
        run: |
          echo "üîç Environment Detection"
          echo "OS: $(uname -s) $(uname -r)"
          echo "User: $(whoami) (UID: $(id -u))"
          echo "Groups: $(groups)"

          # ========================================
          # STEP 1: Ê®©Èôê„É¨„Éô„É´Ê§úË®ºÔºàÈùû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÈôêÂÆöÔºâ
          # ========================================
          ROOT_USER=false
          SUDO_NOPASSWD=false

          echo "üîê Permission Level Detection (Non-Interactive Only)"

          if [ "$(id -u)" -eq 0 ]; then
            echo "‚úÖ Running as root user"
            ROOT_USER=true
          elif timeout 2 sudo -n true 2>/dev/null; then
            echo "‚úÖ sudo available without password"
            SUDO_NOPASSWD=true
          else
            echo "‚ÑπÔ∏è  No passwordless sudo - will use user-space alternatives"
            echo "   This is normal and expected in most local environments"
          fi

          # ========================================
          # STEP 2: „Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÊ§úË®º
          # ========================================
          echo ""
          echo "üì¶ Package Manager Detection"
          APT_AVAILABLE=false
          BREW_AVAILABLE=false
          YUM_AVAILABLE=false

          if command -v apt-get >/dev/null 2>&1; then
            echo "‚úÖ apt-get available"
            APT_AVAILABLE=true
          fi

          if command -v brew >/dev/null 2>&1; then
            echo "‚úÖ brew available"
            BREW_AVAILABLE=true
          fi

          if command -v yum >/dev/null 2>&1; then
            echo "‚úÖ yum available"
            YUM_AVAILABLE=true
          fi

          # ========================================
          # STEP 3: „Ç§„É≥„Çπ„Éà„Éº„É´Êà¶Áï•Ê±∫ÂÆö„ÉªÂÆüË°å
          # ========================================
          echo ""
          echo "üéØ Installation Strategy Selection"

          INSTALL_SUCCESS=false

          # Êà¶Áï•1: Root + apt
          if [ "$ROOT_USER" = true ] && [ "$APT_AVAILABLE" = true ]; then
            echo "üìã Strategy 1: Root + apt-get"
            if apt-get update && apt-get install -y bats; then
              echo "‚úÖ Strategy 1 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "‚ùå Strategy 1 failed"
            fi
          fi

          # Êà¶Áï•2: sudo(no-passwd) + apt
          if [ "$INSTALL_SUCCESS" = false ] && [ "$SUDO_NOPASSWD" = true ] && [ "$APT_AVAILABLE" = true ]; then
            echo "üìã Strategy 2: sudo(no-passwd) + apt-get"
            if timeout 10 sudo apt-get update && timeout 30 sudo apt-get install -y bats; then
              echo "‚úÖ Strategy 2 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "‚ùå Strategy 2 failed"
            fi
          fi

          # Êà¶Áï•3: brew („Éë„Çπ„ÉØ„Éº„Éâ‰∏çË¶Å)
          if [ "$INSTALL_SUCCESS" = false ] && [ "$BREW_AVAILABLE" = true ]; then
            echo "üìã Strategy 3: brew install"
            if brew install bats-core; then
              echo "‚úÖ Strategy 3 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "‚ùå Strategy 3 failed"
            fi
          fi

          # Êà¶Áï•4: Manual installation (ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ)
          if [ "$INSTALL_SUCCESS" = false ]; then
            echo "üìã Strategy 4: Manual installation (fallback)"
            echo "Downloading bats-core from GitHub..."
            if command -v wget >/dev/null 2>&1; then
              DOWNLOAD_CMD="wget -O"
            elif command -v curl >/dev/null 2>&1; then
              DOWNLOAD_CMD="curl -L -o"
            else
              echo "‚ùå No download tool available (wget/curl)"
              exit 1
            fi

            # „É¶„Éº„Ç∂„Éº„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Ç§„É≥„Çπ„Éà„Éº„É´
            mkdir -p "$HOME/bin" "$HOME/.local/bin"
            cd /tmp

            if $DOWNLOAD_CMD bats-core.tar.gz https://github.com/bats-core/bats-core/archive/v1.10.0.tar.gz && \
              tar -xzf bats-core.tar.gz && \
              (cd bats-core-1.10.0 && ./install.sh "$HOME"); then

              # PATHË®≠ÂÆö
              export PATH="$HOME/bin:$PATH"
              echo "export PATH=\"\$HOME/bin:\$PATH\"" >> "$HOME/.bashrc" 2>/dev/null || true

              # GitHub ActionsÁí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
              if [ -n "$GITHUB_ENV" ]; then
                echo "PATH=$HOME/bin:$PATH" >> "$GITHUB_ENV"
              fi

              echo "‚úÖ Strategy 4 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "‚ùå Strategy 4 failed"
            fi
          fi

          # ========================================
          # STEP 4: „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™ç
          # ========================================
          echo ""
          echo "üî¨ Installation Verification"

          # PATHÁ¢∫Ë™ç„ÉªÊõ¥Êñ∞
          export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

          if command -v bats >/dev/null 2>&1; then
            BATS_PATH=$(which bats)
            BATS_VERSION=$(bats --version)
            echo "‚úÖ Bats installation successful"
            echo "   Path: $BATS_PATH"
            echo "   Version: $BATS_VERSION"
          else
            echo "‚ùå Bats installation failed - not found in PATH"
            echo "   Current PATH: $PATH"
            echo "   Contents of \$HOME/bin: $(ls -la $HOME/bin/ 2>/dev/null || echo 'directory not found')"
            exit 1
          fi

      - name: Run Bats test suite
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          # PATHË®≠ÂÆöÔºàAlpineÁ≠â„ÅÆÁí∞Â¢ÉÂØæÂøúÔºâ
          export PATH=$HOME/bin:$PATH

          echo "Running environment check..."
          echo "Bats location: $(which bats || echo 'not found')"
          echo "Docker availability: $(command -v docker >/dev/null && echo 'available' || echo 'not available')"
          echo "Make availability: $(command -v make >/dev/null && echo 'available' || echo 'not available')"

          # „ÉÜ„Çπ„ÉàÂÆüË°å
          if command -v bats >/dev/null 2>&1; then
            if command -v make >/dev/null 2>&1; then
              echo "üß™ Running make-based bats tests..."
              make test-docker
              make test-services
              make test-integration
            else
              echo "üß™ Running direct bats tests..."
              bats tests/test_docker_build.bats
              bats tests/test_services.bats
              bats tests/test_integration.bats
            fi
          else
            echo "‚ùå Bats not available - tests cannot run"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: docker compose down -v || true

  integration:
    runs-on: ubuntu-latest
    needs: lint  # build„Ç∏„Éß„Éñ„Å´‰æùÂ≠ò„Åõ„Åö„ÄÅlint„ÅÆ„Åø„Å´‰æùÂ≠ò
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          docker compose build
          # CIÁí∞Â¢É„Åß„ÅØGitHub MCP„Çµ„Éº„Éì„Çπ„Çí„Çπ„Ç≠„ÉÉ„Éó
          docker compose up -d datetime-validator
          sleep 30

      - name: Check service health
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          docker compose ps
          docker compose logs datetime-validator

      - name: Run integration tests
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          ./tests/integration_test.sh

      - name: Cleanup
        if: always()
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: docker compose down -v
