---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_call:  # 再利用可能ワークフローとして使用可能にする

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,DL3018

      - name: Lint Shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \;

      - name: Lint YAML files
        run: |
          pip install yamllint
          yamllint -c .yamllint.yml docker-compose.yml

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image with buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # 将来的に linux/amd64,linux/arm64 対応予定
          push: false
          load: true  # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Display Docker images
        run: docker images

      - name: Test Docker image basic functionality
        run: |
          # Test main.py version command
          docker run --rm mcp-docker:latest python /app/main.py --version
          # Test default command (mcp-server-github)
          docker run --rm mcp-docker:latest --help || true
          # Inspect image
          docker inspect mcp-docker:latest

  security:
    runs-on: ubuntu-latest
    needs: lint  # buildジョブに依存せず、lintのみに依存
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for security scan
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'mcp-docker:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          trivyignores: '.trivyignore'
          ignore-unfixed: true
          skip-dirs: '__pycache__,.git,node_modules'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for PR comment
        uses: aquasecurity/trivy-action@0.28.0
        if: github.event_name == 'pull_request'
        with:
          image-ref: 'mcp-docker:latest'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          trivyignores: '.trivyignore'
          ignore-unfixed: true
          skip-dirs: '__pycache__,.git,node_modules'

  test:
    runs-on: ubuntu-latest
    needs: lint  # buildジョブに依存せず、lintのみに依存
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # ローカルのDocker daemonに読み込み
          tags: mcp-docker:latest

      - name: Install Bats
        run: |
          # より信頼性の高いaptパッケージを使用
          sudo apt-get update
          sudo apt-get install -y bats

          # バックアップとして手動インストールを試行
          if ! command -v bats &> /dev/null; then
            echo "apt install failed, trying manual installation..."
            wget -O bats-core.tar.gz https://github.com/bats-core/bats-core/archive/v1.10.0.tar.gz
            tar -xzf bats-core.tar.gz
            sudo mv bats-core-1.10.0 /opt/bats
            sudo ln -sf /opt/bats/bin/bats /usr/local/bin/bats
          fi

          bats --version

      - name: Run Bats test suite
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          make test-docker
          make test-services
          make test-integration

      - name: Cleanup
        if: always()
        run: docker compose down -v || true

  integration:
    runs-on: ubuntu-latest
    needs: lint  # buildジョブに依存せず、lintのみに依存
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        env:
          USER_ID: 1001
          GROUP_ID: 1001
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          docker compose build
          # CI環境ではGitHub MCPサービスをスキップ
          docker compose up -d datetime-validator
          sleep 30

      - name: Check service health
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          docker compose ps
          docker compose logs datetime-validator

      - name: Run integration tests
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: |
          ./tests/integration_test.sh

      - name: Cleanup
        if: always()
        env:
          GITHUB_PERSONAL_ACCESS_TOKEN: "dummy_token_for_ci"
        run: docker compose down -v
