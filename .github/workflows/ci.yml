---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009,DL3018

      - name: Lint Shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \;

      - name: Lint YAML files
        run: |
          pip install yamllint
          yamllint -c .yamllint.yml docker-compose.yml

  build:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        docker-version: ['20.10', '24.0']
        exclude:
          # Windows doesn't support Docker 20.10 in GitHub Actions
          - os: windows-latest
            docker-version: '20.10'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker (Linux/macOS)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0

      - name: Set up Docker (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows Docker setup
          docker version

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t mcp-docker:latest .
          docker images

      - name: Test Docker image
        run: |
          # 基本的なイメージテスト
          docker run --rm mcp-docker:latest --version || true
          docker inspect mcp-docker:latest

      - name: Platform-specific tests
        shell: bash
        run: |
          echo "Testing on ${{ runner.os }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Windows-specific Docker tests"
            # Windows specific tests here
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "macOS-specific Docker tests"
            # macOS specific tests here
          else
            echo "Linux-specific Docker tests"
            # Linux specific tests here
          fi

  security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Build image for security scan
        run: docker build -t mcp-docker:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mcp-docker:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  bats-test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Windows excluded due to Bats compatibility
    steps:
      - uses: actions/checkout@v4

      - name: Install Bats
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install bats-core
          else
            curl -sSL https://github.com/bats-core/bats-core/archive/v1.10.0.tar.gz | tar -xzf -
            sudo mv bats-core-1.10.0 /opt/bats
            sudo ln -sf /opt/bats/bin/bats /usr/local/bin/bats
          fi
          bats --version

      - name: Run Bats test suite
        shell: bash
        run: |
          make test-docker
          make test-services
          make test-integration

      - name: Cleanup
        if: always()
        shell: bash
        run: docker compose down -v || true

  integration-test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Windows excluded due to Docker Compose compatibility issues
    steps:
      - uses: actions/checkout@v4

      - name: Build and start services
        shell: bash
        run: |
          docker compose build
          docker compose up -d
          sleep 30

      - name: Check service health
        shell: bash
        run: |
          docker compose ps
          docker compose logs

      - name: Platform-specific integration tests
        shell: bash
        run: |
          echo "Running integration tests on ${{ runner.os }}"
          # Add platform-specific integration tests here
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "macOS-specific integration tests"
          else
            echo "Linux-specific integration tests"
          fi

      - name: Cleanup
        if: always()
        shell: bash
        run: docker compose down -v
