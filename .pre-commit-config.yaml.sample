---
# GitHub Actions Simulator - Pre-commit Configuration Sample
# カスタマイズ可能なpre-commit設定テンプレート
#
# このファイルをコピーして .pre-commit-config.yaml として使用してください:
#   cp .pre-commit-config.yaml.sample .pre-commit-config.yaml
#
# プロジェクトのニーズに合わせて以下をカスタマイズできます:
# - 品質レベルの選択（基本/標準/厳格）
# - 特定のチェックの有効/無効
# - 除外パターンの調整
# - GitHub Actions Simulator統合の設定

# === 設定レベル選択 ===
# 以下のいずれかのレベルを選択してください:
# - basic: 基本的なファイル品質チェックのみ
# - standard: コード品質チェックを含む（推奨）
# - strict: 全ての品質チェックを含む（CI/CD環境向け）

# 現在の設定レベル: standard
CONFIG_LEVEL: &config_level "standard"

# === 除外パターン（プロジェクト固有の調整） ===
exclude: |
  (?x)^(
    # 標準除外パターン
    \.git/.*|
    \.mypy_cache/.*|
    \.pytest_cache/.*|
    \.ruff_cache/.*|
    \.venv/.*|
    __pycache__/.*|
    node_modules/.*|
    output/.*|
    logs/.*|
    \.env.*|
    sbom-.*\.json|
    .*\.log|
    # プロジェクト固有の除外パターンをここに追加
    # 例: vendor/.*|
    # 例: generated/.*|
  )$

repos:
  # === Level: basic - 基本的なファイル品質チェック ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        name: "🧹 末尾空白の削除"
      - id: end-of-file-fixer
        name: "📝 ファイル末尾の改行修正"
      - id: check-yaml
        name: "📋 YAML構文チェック"
        exclude: ^\.github/workflows/.*\.yml\.sample$
      - id: check-json
        name: "📋 JSON構文チェック"
      - id: check-added-large-files
        name: "📦 大容量ファイルチェック"
        args: ['--maxkb=1024']
      - id: check-merge-conflict
        name: "🔀 マージコンフリクトチェック"
      - id: mixed-line-ending
        name: "📄 改行コード統一"
        args: ['--fix=lf']

  # === Level: standard - コード品質チェック ===
  # 以下のセクションは CONFIG_LEVEL が "standard" または "strict" の場合に有効

  # Docker/Infrastructure 品質チェック
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "🐳 Dockerfile品質チェック"
        # カスタマイズ可能な無視ルール
        args: [
          --ignore, DL3008,  # パッケージバージョン固定
          --ignore, DL3009,  # apt-get clean
          --ignore, DL3018,  # パッケージバージョン固定（Alpine）
          # 追加の無視ルールをここに追加
          # --ignore, DL3059,  # 複数RUNコマンド
        ]

  - repo: https://github.com/koalaman/shellcheck-precommit
    rev: v0.10.0
    hooks:
      - id: shellcheck
        name: "🐚 Shell スクリプト品質チェック"
        args: [
          --severity=warning,
          --shell=bash,
          --exclude=SC2034,  # 未使用変数
          --exclude=SC1091,  # 外部ファイル読み込み
          # 追加の除外ルールをここに追加
          # --exclude=SC2086,  # クォート不足
        ]

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        name: "📋 YAML品質チェック"
        args: [-c, .yamllint.yml]
        exclude: ^\.github/workflows/.*\.yml\.sample$

  # Python コード品質
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: "🐍 Python コード品質チェック"
        args: [--fix, --exit-non-zero-on-fix]
        files: ^(src/|tests/|examples/|scripts/.*\.py$)
      - id: ruff-format
        name: "🎨 Python コードフォーマット"
        files: ^(src/|tests/|examples/|scripts/.*\.py$)

  # === Level: strict - 厳格な品質チェック ===
  # 以下のセクションは CONFIG_LEVEL が "strict" の場合のみ有効
  # 本格的な開発やCI/CD環境で使用

  # 型チェック（strict レベルでのみ有効化）
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.8.0
  #   hooks:
  #     - id: mypy
  #       name: "🔍 Python 型チェック"
  #       files: ^src/
  #       args: [--ignore-missing-imports, --strict-optional]
  #       additional_dependencies: [types-requests, types-PyYAML]

  # === GitHub Actions Simulator 統合チェック ===
  - repo: local
    hooks:
      # 基本的な統合チェック（全レベルで有効）
      - id: actions-workflow-validation
        name: "✅ GitHub Actions ワークフロー検証"
        entry: bash -c 'find .github/workflows -name "*.yml" -o -name "*.yaml" | grep -v "\.sample$" | head -5'
        language: system
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: false

      - id: docker-environment-check
        name: "🐳 Docker 環境チェック"
        entry: bash -c 'docker --version && docker compose version && echo "✅ Docker 環境正常"'
        language: system
        pass_filenames: false
        files: ^(Dockerfile|docker-compose\.ya?ml|\.dockerignore)$

      # 高速単体テスト（standard レベル以上で有効）
      - id: actions-simulator-unit-tests
        name: "🧪 Actions Simulator 単体テスト"
        entry: >
          uv run pytest
          tests/test_hangup_unit.py::TestDiagnosticServiceUnit::test_diagnostic_service_initialization
          tests/test_hangup_unit.py::TestProcessMonitorUnit::test_process_monitor_initialization
          tests/test_hangup_unit.py::TestExecutionTracerUnit::test_execution_tracer_initialization
          -x --tb=short --disable-warnings --timeout=30
        language: system
        pass_filenames: false
        files: ^(src/|tests/test_hangup_unit\.py)

      # 設定ファイル検証
      - id: actions-simulator-config-check
        name: "⚙️ Actions Simulator 設定検証"
        entry: bash -c 'if [ -f ".env.example" ]; then echo "✅ .env.example 存在確認"; else echo "❌ .env.example が見つかりません"; exit 1; fi'
        language: system
        files: ^(\.env\.example|pyproject\.toml|main\.py)$
        pass_filenames: false

      # バージョン整合性チェック
      - id: version-consistency-check
        name: "🏷️ バージョン整合性チェック"
        entry: bash -c 'make version-sync && echo "✅ バージョン整合性確認完了"'
        language: system
        files: ^(pyproject\.toml|main\.py)$
        pass_filenames: false

      # === 厳格レベル専用チェック ===
      # 以下は CONFIG_LEVEL が "strict" の場合のみ有効化してください

      # - id: actions-simulator-integration-tests
      #   name: "🔗 Actions Simulator 統合テスト"
      #   entry: bash -c 'make test-hangup-quick'
      #   language: system
      #   pass_filenames: false
      #   files: ^(src/|tests/)

      # - id: documentation-link-check
      #   name: "🔗 ドキュメントリンク検証"
      #   entry: bash -c 'make check-docs'
      #   language: system
      #   files: \.md$
      #   pass_filenames: false

      # - id: security-scan-quick
      #   name: "🔒 セキュリティクイックスキャン"
      #   entry: bash -c 'make security SKIP_BUILD=true SEVERITY=HIGH'
      #   language: system
      #   files: ^(Dockerfile|requirements.*|pyproject\.toml)$
      #   pass_filenames: false

# === カスタマイズガイド ===
#
# 1. 設定レベルの変更:
#    CONFIG_LEVEL の値を "basic", "standard", "strict" のいずれかに変更
#
# 2. 特定のチェックを無効化:
#    該当するhookをコメントアウト（# を行頭に追加）
#
# 3. 除外パターンの追加:
#    exclude セクションにパターンを追加
#
# 4. プロジェクト固有のチェック追加:
#    local repo セクションに新しいhookを追加
#
# 5. GitHub Actions Simulator 統合のカスタマイズ:
#    - テストファイルパスの調整
#    - タイムアウト値の変更
#    - 追加の検証ルールの設定
#
# === 段階的導入の推奨手順 ===
#
# 1. 既存プロジェクトへの導入:
#    a) CONFIG_LEVEL を "basic" に設定
#    b) pre-commit install を実行
#    c) pre-commit run --all-files で全体チェック
#    d) 問題を修正後、"standard" レベルに移行
#
# 2. 新規プロジェクトでの使用:
#    a) CONFIG_LEVEL を "standard" に設定
#    b) 必要に応じて除外パターンを調整
#    c) プロジェクト固有のチェックを追加
#
# 3. CI/CD環境での使用:
#    a) CONFIG_LEVEL を "strict" に設定
#    b) 全ての品質チェックを有効化
#    c) 失敗時の通知設定を追加
#
# === GitHub Actions Simulator との統合例 ===
#
# このテンプレートは以下の統合パターンを提供します:
#
# 1. ワークフロー事前検証:
#    - GitHub Actions ワークフローファイルの構文チェック
#    - Actions Simulator での実行可能性確認
#
# 2. Docker環境整合性:
#    - Dockerfile品質チェック
#    - docker-compose.yml構文検証
#    - コンテナ環境の基本動作確認
#
# 3. 設定ファイル整合性:
#    - 環境変数テンプレートの存在確認
#    - バージョン情報の同期確認
#    - 依存関係の整合性チェック
#
# 4. 品質ゲート統合:
#    - 段階的な品質レベル適用
#    - 開発フェーズに応じたチェック強度調整
#    - CI/CDパイプラインとの連携
#
# === 使用方法 ===
#
# 1. テンプレートのコピー:
#    cp .pre-commit-config.yaml.sample .pre-commit-config.yaml
#
# 2. 設定のカスタマイズ:
#    エディタで .pre-commit-config.yaml を編集
#
# 3. pre-commit のインストール:
#    pre-commit install
#
# 4. 初回実行:
#    pre-commit run --all-files
#
# 5. Make コマンドでの実行:
#    make pre-commit
#
# === トラブルシューティング ===
#
# 問題が発生した場合は以下を確認してください:
#
# 1. Docker環境: make docker-health
# 2. Python環境: uv sync
# 3. 権限設定: ./scripts/fix-permissions.sh
# 4. 設定検証: pre-commit validate-config
# 5. キャッシュクリア: pre-commit clean
