# =============================================================================
# Docker Compose Override Configuration Template
# GitHub Actions Simulator - カスタマイズ設定例
# =============================================================================
# このファイルは docker-compose.override.yml.sample として提供されています。
# 実際の使用時は docker-compose.override.yml にコピーして設定をカスタマイズしてください：
#   cp docker-compose.override.yml.sample docker-compose.override.yml
#
# Docker Compose は以下の順序で設定ファイルを読み込みます：
# 1. docker-compose.yml (ベース設定)
# 2. docker-compose.override.yml (カスタマイズ設定) ← このファイル
#
# 注意: docker-compose.override.yml は環境固有の設定を含むため、
#       必要に応じて .gitignore に追加することを検討してください。
# =============================================================================

# Docker Compose Override Configuration
# Note: version field is no longer required in modern Docker Compose

services:
  # ==========================================================================
  # 🚀 Actions Simulator - 開発環境最適化設定
  # ==========================================================================
  # Note: actions-simulator service is defined with profiles in base config
  actions-simulator:
    # --- パフォーマンス最適化 ---
    deploy:
      resources:
        limits:
          # 開発環境でのリソース制限を緩和
          memory: 8G        # メモリ上限を8GBに増加（大規模ワークフロー対応）
          cpus: "6.0"       # CPU使用量を6コアに増加
        reservations:
          memory: 2G        # 最小メモリ予約を2GBに増加
          cpus: "2.0"       # 最小CPU予約を2コアに増加

    # --- 開発用環境変数の追加・上書き ---
    environment:
      # デバッグ設定の強化
      - ACTIONS_SIMULATOR_VERBOSE=true
      - ACTIONS_SIMULATOR_DEBUG=true
      - ACT_LOG_LEVEL=debug
      - ACTIONS_RUNNER_DEBUG=true
      - RUNNER_DEBUG=true

      # パフォーマンス設定
      - ACTIONS_SIMULATOR_ACT_TIMEOUT_SECONDS=1800  # タイムアウトを30分に延長
      - ACT_PARALLEL_JOBS=4                         # 並列実行ジョブ数を増加
      - DOCKER_BUILDKIT=1                           # BuildKit有効化
      - COMPOSE_PARALLEL_LIMIT=8                    # Compose並列処理数増加

      # 開発者体験向上
      - PYTHONUNBUFFERED=1                          # リアルタイムログ出力
      - PYTHONDONTWRITEBYTECODE=1                   # .pycファイル生成無効化
      - ACTIONS_SIMULATOR_HOT_RELOAD=true           # ホットリロード有効化
      - ACTIONS_SIMULATOR_AUTO_RESTART=true         # 自動再起動有効化

      # キャッシュ最適化
      - UV_CACHE_DIR=/app/.cache/uv
      - PIP_CACHE_DIR=/app/.cache/pip
      - ACT_CACHE_DIR=/opt/act/cache
      - DOCKER_BUILDKIT_CACHE_MOUNT_NS=github-actions-simulator

    # --- 開発用ボリュームマウントの追加 ---
    volumes:
      # ソースコードのホットリロード対応
      - ./pyproject.toml:/app/pyproject.toml:ro     # 依存関係設定
      - ./uv.lock:/app/uv.lock:ro                   # ロックファイル
      - ./.env:/app/.env:ro                         # 環境変数ファイル

      # 開発ツール用ディレクトリ
      - ./tests:/app/tests:rw                       # テストファイル
      - ./docs:/app/docs:rw                         # ドキュメント
      - ./scripts:/app/scripts:rw                   # スクリプト

      # キャッシュボリュームの最適化
      - pip-cache:/app/.cache/pip:rw                # Pipキャッシュ
      - pytest-cache:/app/.pytest_cache:rw          # Pytestキャッシュ
      - mypy-cache:/app/.mypy_cache:rw              # Mypyキャッシュ

      # 開発用一時ディレクトリ
      - ./tmp:/app/tmp:rw                           # 一時ファイル用
      - ./debug:/app/debug:rw                       # デバッグ出力用

    # --- ネットワーク設定の追加 ---
    ports:
      - "8000:8000"     # HTTPサーバー
      - "8001:8001"     # デバッグサーバー（追加）
      - "5678:5678"     # Python デバッガー (debugpy)

    # --- セキュリティ設定の調整（開発環境用） ---
    cap_add:
      - SYS_PTRACE      # デバッガー使用のため
      - NET_ADMIN       # ネットワーク設定変更のため

    # --- ヘルスチェックの調整 ---
    healthcheck:
      test: [
        "CMD",
        "bash",
        "-c",
        "curl -f http://localhost:8000/health || python -c 'import requests; requests.get(\"http://localhost:8000/health\")'"
      ]
      interval: 15s     # チェック間隔を短縮
      timeout: 10s      # タイムアウトを短縮
      retries: 5
      start_period: 60s # 起動時間を延長

    # --- ログ設定の最適化 ---
    logging:
      driver: "json-file"
      options:
        max-size: "200m"    # ログファイルサイズを増加
        max-file: "10"      # ログファイル数を増加
        labels: "service=actions-simulator,env=development"

  # ==========================================================================
  # 🐚 Actions Shell - インタラクティブ開発環境
  # ==========================================================================
  actions-shell:
    # --- 開発用リソース設定 ---
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 1G
          cpus: "1.0"

    # --- 開発ツールの追加インストール ---
    environment:
      # 開発ツール設定
      - SHELL=/bin/bash
      - TERM=xterm-256color
      - EDITOR=vim
      - PAGER=less

      # Git設定（コンテナ内でのGit操作用）
      - GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME:-Developer}
      - GIT_AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-dev@example.com}
      - GIT_COMMITTER_NAME=${GIT_COMMITTER_NAME:-Developer}
      - GIT_COMMITTER_EMAIL=${GIT_COMMITTER_EMAIL:-dev@example.com}

      # Python開発環境
      - PYTHONPATH=/app:/app/src:/app/services
      - PYTEST_CURRENT_TEST=true

    # --- 開発用コマンドの拡張 ---
    command:
      - "bash"
      - "-c"
      - |
        echo '🚀 GitHub Actions Simulator - 開発シェル環境'
        echo '=============================================='
        echo ''
        echo '📋 利用可能なコマンド:'
        echo '  🎭 Actions Simulator:'
        echo '    uv run python main.py actions --help'
        echo '    uv run python main.py actions list'
        echo '    uv run python main.py actions run <workflow>'
        echo ''
        echo '  🐳 Docker & Act:'
        echo '    act --help'
        echo '    act --list'
        echo '    docker ps'
        echo '    docker images'
        echo ''
        echo '  🧪 テスト & 品質:'
        echo '    uv run pytest'
        echo '    uv run pytest --cov'
        echo '    uv run mypy .'
        echo '    uv run ruff check .'
        echo ''
        echo '  📊 監視 & デバッグ:'
        echo '    htop              # システムリソース監視'
        echo '    docker stats      # コンテナリソース監視'
        echo '    tail -f /app/logs/*.log  # ログ監視'
        echo ''
        echo '  🔧 開発ツール:'
        echo '    uv add <package>  # パッケージ追加'
        echo '    uv sync           # 依存関係同期'
        echo '    uv run --help     # UV実行ヘルプ'
        echo ''
        echo '💡 ヒント: タブ補完が利用可能です'
        echo '📁 作業ディレクトリ: /app'
        echo ''
        exec bash

  # ==========================================================================
  # 📊 Actions Server - 本番環境設定例
  # ==========================================================================
  actions-server:
    # --- 本番環境リソース制限 ---
    deploy:
      resources:
        limits:
          memory: 6G        # 本番環境での安定したメモリ制限
          cpus: "4.0"       # CPU使用量制限
        reservations:
          memory: 2G        # 最小メモリ保証
          cpus: "1.0"       # 最小CPU保証

      # --- 本番環境での配置制約 ---
      placement:
        constraints:
          - node.role == manager    # マネージャーノードでの実行
        preferences:
          - spread: node.id         # ノード間での分散配置

    # --- 本番環境用環境変数 ---
    environment:
      # ログレベルの最適化
      - LOG_LEVEL=info
      - ACT_LOG_LEVEL=info
      - ACTIONS_RUNNER_DEBUG=false
      - RUNNER_DEBUG=false
      - ACTIONS_SIMULATOR_VERBOSE=false
      - ACTIONS_SIMULATOR_DEBUG=false

      # パフォーマンス設定
      - ACTIONS_SIMULATOR_ACT_TIMEOUT_SECONDS=900
      - ACT_PARALLEL_JOBS=2
      - ACTIONS_SIMULATOR_MAX_CONCURRENT_WORKFLOWS=5

      # セキュリティ設定
      - ACTIONS_SIMULATOR_SECURITY_MODE=strict
      - ACTIONS_SIMULATOR_AUDIT_LOG=true
      - MASK_SECRETS_IN_LOGS=true

      # 監視設定
      - MONITOR_MEMORY_USAGE=true
      - MONITOR_CPU_USAGE=true
      - PERFORMANCE_METRICS_INTERVAL=60
      - HEALTH_CHECK_INTERVAL=30

    # --- 本番環境でのボリューム設定 ---
    volumes:
      # 読み取り専用マウント（セキュリティ強化）
      - ./.github:/app/.github:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./uv.lock:/app/uv.lock:ro

      # ログとデータの永続化
      - actions-logs:/app/logs:rw
      - actions-output:/app/output:rw
      - actions-metrics:/app/metrics:rw

    # --- 本番環境でのネットワーク設定 ---
    networks:
      - mcp-network
      - monitoring-network    # 監視ネットワークへの接続

    # --- 本番環境でのヘルスチェック ---
    healthcheck:
      test: [
        "CMD",
        "bash",
        "-c",
        "curl -f http://localhost:8000/health && curl -f http://localhost:8000/metrics"
      ]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s

    # --- 本番環境での再起動ポリシー ---
    restart: always

    # --- 本番環境でのログ設定 ---
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=actions-server,env=production"

  # ==========================================================================
  # 🔍 監視・メトリクス収集サービス（オプション）
  # ==========================================================================

  # Prometheus メトリクス収集
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
      - monitoring-network
    profiles:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Grafana ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - monitoring-network
    profiles:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # ==========================================================================
  # 🔒 セキュリティ強化サービス（オプション）
  # ==========================================================================

  # セキュリティスキャナー
  security-scanner:
    image: aquasec/trivy:latest
    container_name: mcp-security-scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache/trivy:rw
      - ./security-reports:/reports:rw
    command:
      - "sh"
      - "-c"
      - |
        echo "🔒 セキュリティスキャン開始..."
        trivy image --format json --output /reports/security-scan-$(date +%Y%m%d-%H%M%S).json mcp-actions-simulator:latest
        echo "✅ セキュリティスキャン完了"
    networks:
      - mcp-network
    profiles:
      - security
    restart: "no"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"

# =============================================================================
# 🌐 ネットワーク設定
# =============================================================================
networks:
  # 監視用ネットワーク
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.github-actions-simulator.network=monitoring"

  # 外部ネットワーク接続（既存のネットワークを使用する場合）
  # external-network:
  #   external: true
  #   name: existing-network-name

# =============================================================================
# 💾 ボリューム設定
# =============================================================================
volumes:
  # 開発用キャッシュボリューム
  pip-cache:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=cache"

  pytest-cache:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=cache"

  mypy-cache:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=cache"

  # 本番用データボリューム
  actions-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/logs
    labels:
      - "com.github-actions-simulator.volume=data"

  actions-output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/output
    labels:
      - "com.github-actions-simulator.volume=data"

  actions-metrics:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=metrics"

  # 監視用ボリューム
  prometheus-data:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=monitoring"

  grafana-data:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=monitoring"

  # セキュリティ用ボリューム
  trivy-cache:
    driver: local
    labels:
      - "com.github-actions-simulator.volume=security"

# =============================================================================
# 📋 使用例とコマンド
# =============================================================================
#
# === 基本的な使用方法 ===
#
# 1. オーバーライドファイルのコピー:
#    cp docker-compose.override.yml.sample docker-compose.override.yml
#
# 2. 設定のカスタマイズ:
#    vi docker-compose.override.yml
#
# 3. 開発環境での起動:
#    docker-compose up -d actions-simulator actions-shell
#
# 4. 本番環境での起動:
#    docker-compose up -d actions-server
#
# 5. 監視環境の起動:
#    docker-compose --profile monitoring up -d
#
# 6. セキュリティスキャンの実行:
#    docker-compose --profile security up security-scanner
#
# === プロファイル別の起動 ===
#
# 開発環境:
#   docker-compose --profile debug up -d
#
# 本番環境:
#   docker-compose --profile production up -d
#
# 監視環境:
#   docker-compose --profile monitoring up -d
#
# セキュリティ環境:
#   docker-compose --profile security up -d
#
# === リソース監視 ===
#
# コンテナリソース使用量:
#   docker stats
#
# システムリソース使用量:
#   docker system df
#
# ログの確認:
#   docker-compose logs -f actions-simulator
#
# === トラブルシューティング ===
#
# 設定の検証:
#   docker-compose config
#
# サービスの状態確認:
#   docker-compose ps
#
# ヘルスチェック状態:
#   docker inspect --format='{{.State.Health.Status}}' mcp-actions-simulator
#
# === パフォーマンス最適化のヒント ===
#
# 1. メモリ使用量の最適化:
#    - 不要なサービスを停止
#    - キャッシュボリュームの活用
#    - リソース制限の適切な設定
#
# 2. CPU使用量の最適化:
#    - 並列処理数の調整
#    - CPUアフィニティの設定
#    - プロセス優先度の調整
#
# 3. ディスクI/Oの最適化:
#    - SSDの使用
#    - ボリュームマウントの最適化
#    - ログローテーションの設定
#
# 4. ネットワークの最適化:
#    - 内部ネットワークの使用
#    - 不要なポート公開の削除
#    - DNS設定の最適化
#
# =============================================================================
