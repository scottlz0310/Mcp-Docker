---
services:
  github-mcp:
    build: .
    container_name: mcp-github
    stdin_open: true
    tty: true
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    restart: unless-stopped
    command:
      [
        "node",
        "/usr/local/lib/node_modules/@modelcontextprotocol/server-github/dist/index.js",
      ]
    networks:
      - mcp-network

  datetime-validator:
    build: .
    container_name: mcp-datetime
    # セキュリティ: 動的UID/GID設定（書き込み権限確保 + Root昇格防止）
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    volumes:
      - ~/workspace:/workspace:ro # セキュリティ: 読み取り専用
      - ./output:/output:rw # セキュリティ: 書き込みは制限された領域のみ
    restart: unless-stopped
    command:
      - python
      - services/datetime/datetime_validator.py
      - --directory
      - /workspace
    networks:
      - mcp-network
    # セキュリティ: リソース制限
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    # セキュリティ: 特権無効化
    privileged: false
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE # 必要最小限の権限のみ

  actions-simulator:
    build: .
    container_name: mcp-actions-simulator
    volumes:
      - ./.github:/app/.github:ro # ワークフローファイル（読み取り専用）
      - ./output:/app/output:rw # 実行結果出力
      - ./logs:/app/logs:rw # ログファイル出力
      - act-cache:/opt/act/cache:rw # actキャッシュ（読み書き可能）
      - /var/run/docker.sock:/var/run/docker.sock:rw # Dockerアクセス（act用、読み書き可能）
      - /tmp:/tmp:rw # 一時ファイル用
      - act-workspace:/github/workspace:rw # actワークスペース
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST=0.0.0.0
      - PORT=8000
      - ACT_CACHE_DIR=/opt/act/cache
      - ACTIONS_SIMULATOR_ENGINE=act
      - ACTIONS_SIMULATOR_ACT_TIMEOUT_SECONDS=600
      - DOCKER_BUILDKIT=1 # BuildKit有効化
      - COMPOSE_DOCKER_CLI_BUILD=1 # Docker Compose CLI Build有効化
      - ACT_LOG_LEVEL=${ACT_LOG_LEVEL:-info} # actログレベル
      - DOCKER_API_VERSION=${DOCKER_API_VERSION:-1.41} # Docker APIバージョン
      - PYTHONUNBUFFERED=1 # Python出力バッファリング無効化
      - ACTIONS_RUNNER_DEBUG=${ACTIONS_RUNNER_DEBUG:-false} # GitHub Actionsデバッグ
      - RUNNER_DEBUG=${RUNNER_DEBUG:-false} # ランナーデバッグ
      - ACT_PLATFORM=${ACT_PLATFORM:-ubuntu-latest=catthehacker/ubuntu:act-latest} # actプラットフォーム
      - ACT_CONTAINER_DAEMON_SOCKET=/var/run/docker.sock # コンテナ内Dockerソケット
    profiles:
      - tools
    command: ["bash", "-c", "uv run python main.py actions --help"]
    networks:
      - mcp-network
    # 改良されたヘルスチェック設定
    healthcheck:
      test: [
        "CMD",
        "bash",
        "-c",
        "python -c 'import docker; docker.from_env().ping()' && act --version > /dev/null"
      ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    # セキュリティ: リソース制限
    deploy:
      resources:
        limits:
          memory: 4G # actの実行に必要なメモリを増加
          cpus: "4.0" # CPUリソースを増加
        reservations:
          memory: 1G # 最小メモリ予約を増加
          cpus: "1.0" # 最小CPU予約を増加
    # Docker統合のための権限設定
    privileged: false
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - DAC_OVERRIDE # ファイル権限のオーバーライド（act用）
      - SETUID # UID変更（act用）
      - SETGID # GID変更（act用）
      - SYS_PTRACE # プロセストレース（デバッグ用）
      - CHOWN # ファイル所有者変更（act用）
      - FOWNER # ファイル所有者操作（act用）
    # Docker socket グループアクセス
    group_add:
      - "${DOCKER_GID:-999}" # Dockerグループへの追加
    # 依存関係設定（一時的に無効化）
    # depends_on:
    #   - docker-health-check
    # 再起動ポリシー
    restart: unless-stopped
    # ログ設定
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=actions-simulator"

  # Docker接続ヘルスチェック用サービス
  docker-health-check:
    image: docker:24-cli
    container_name: mcp-docker-health-check
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      [
        "sh",
        "-c",
        "docker version && docker info && echo 'Docker daemon is healthy'",
      ]
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "docker", "version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: "no" # 一度実行されれば終了
    profiles:
      - tools

networks:
  mcp-network:
    driver: bridge

volumes:
  act-cache:
  act-workspace:
